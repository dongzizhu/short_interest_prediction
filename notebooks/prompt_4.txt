
You are a financial data scientist expert in feature engineering for Short Interest prediction models. 

I have financial time series data with the following structure:
- Shape: (samples, lookback_window=4, features=62)
- Features at each timestamp T include:
  1. Short interest at time T reported every 15 days (1 dimension)
  2. Average daily volume quantity of past 15 days (1 dimension) 
  3. OHLC (Open, High, Low, Close) prices for past 15 days (4 × 15 = 60 dimensions)

Total: 1 + 1 + 60 = 62 features(dimensions) per timestamp.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 6.87%
  Features: All 62 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_35 (importance=0.0001), Feature_0 (importance=0.0001), Feature_12 (importance=0.0001), Feature_26 (importance=0.0000), Feature_1 (importance=0.0000)

Iteration 1: Iteration 1 - MAPE: 8.25% (Improvement: -1.4%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_97 (importance=0.0010), Feature_98 (importance=0.0006), Feature_66 (importance=0.0002), Feature_12 (importance=0.0002), Feature_145 (importance=0.0002)

Iteration 2: Iteration 2 - MAPE: 8.67% (Improvement: -1.8%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_22 (importance=0.0017), Feature_23 (importance=0.0013), Feature_113 (importance=0.0005), Feature_43 (importance=0.0005), Feature_8 (importance=0.0005)

Iteration 3: Iteration 3 - MAPE: 10.57% (Improvement: -3.7%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_71 (importance=0.0033), Feature_77 (importance=0.0027), Feature_82 (importance=0.0016), Feature_69 (importance=0.0016), Feature_78 (importance=0.0011)




DL-BASED FEATURE IMPORTANCE INSIGHTS FROM BEST MODEL (MAPE: 6.87%):
- Most important features: Feature_35 (importance=0.0001), Feature_0 (importance=0.0001), Feature_12 (importance=0.0001), Feature_26 (importance=0.0000), Feature_1 (importance=0.0000)
- Least important features: Feature_52 (importance=-0.0000), Feature_47 (importance=-0.0000), Feature_14 (importance=-0.0000)






PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 3):

```python
def construct_features(data):
    """
    Constructs engineered features for short interest prediction.
    
    Args:
        data: numpy array of shape (lookback_window, 62)
              where data[:, 0] = short interest
                    data[:, 1] = average daily volume
                    data[:, 2:62] = OHLC prices for past 15 days (4 features × 15 days)
    
    Returns:
        numpy array of shape (lookback_window, constructed_features)
    """
    lookback_window = data.shape[0]
    
    # Handle NaN values
    data = np.nan_to_num(data, nan=0.0)
    
    # Extract key components
    short_interest = data[:, 0:1]  # Feature_0 was identified as important
    avg_volume = data[:, 1:2]
    
    # Reshape OHLC data for easier manipulation
    # Each day has 4 values (OHLC), and we have 15 days of data
    ohlc_data = data[:, 2:62].reshape(lookback_window, 15, 4)
    
    # Extract OHLC components
    open_prices = ohlc_data[:, :, 0]
    high_prices = ohlc_data[:, :, 1]
    low_prices = ohlc_data[:, :, 2]
    close_prices = ohlc_data[:, :, 3]
    
    # Initialize list to store all features
    all_features = []
    
    # IMPORTANT: Based on performance history, we're going back to basics
    # The baseline model (6.87% MAPE) outperformed the engineered features
    # This suggests we should keep the original features and make minimal transformations
    
    # 1. Keep ALL original features - they performed best in baseline
    # Feature_35, Feature_0, Feature_12, Feature_26, Feature_1 were most important
    all_features.append(short_interest)  # Feature_0
    all_features.append(avg_volume)      # Feature_1
    
    # Keep all original OHLC data - reshape to maintain original structure
    all_features.append(data[:, 2:62])
    
    # 2. Add minimal transformations of the most important features
    # Focus on Feature_35 (which is in the OHLC data)
    # Feature_35 corresponds to a specific OHLC value on a specific day
    # We'll identify which one it is and create variations
    
    # Feature_35 is at index 35-2=33 in the OHLC data (after removing SI and volume)
    # 33 // 4 = 8, 33 % 4 = 1, so it's the High price of the 9th day (0-indexed)
    # Let's create variations of this specific feature
    
    # Extract Feature_35 (High price of 9th day)
    feature_35 = high_prices[:, 8:9]
    
    # Create variations of Feature_35
    feature_35_ma3 = np.zeros((lookback_window, 1))
    feature_35_ma5 = np.zeros((lookback_window, 1))
    feature_35_momentum = np.zeros((lookback_window, 1))
    
    for i in range(lookback_window):
        # Moving averages
        if i >= 2:
            feature_35_ma3[i, 0] = np.mean(high_prices[i-2:i+1, 8])
        else:
            feature_35_ma3[i, 0] = high_prices[i, 8]
            
        if i >= 4:
            feature_35_ma5[i, 0] = np.mean(high_prices[i-4:i+1, 8])
        else:
            feature_35_ma5[i, 0] = high_prices[i, 8]
        
        # Momentum
        if i > 0:
            feature_35_momentum[i, 0] = high_prices[i, 8] - high_prices[i-1, 8]
    
    all_features.append(feature_35_ma3)
    all_features.append(feature_35_ma5)
    all_features.append(feature_35_momentum)
    
    # 3. Feature_12 was also important - identify and enhance
    # Feature_12 is at index 12-2=10 in the OHLC data
    # 10 // 4 = 2, 10 % 4 = 2, so it's the Low price of the 3rd day (0-indexed)
    feature_12 = low_prices[:, 2:3]
    
    # Create variations of Feature_12
    feature_12_ma3 = np.zeros((lookback_window, 1))
    feature_12_momentum = np.zeros((lookback_window, 1))
    
    for i in range(lookback_window):
        # Moving average
        if i >= 2:
            feature_12_ma3[i, 0] = np.mean(low_prices[i-2:i+1, 2])
        else:
            feature_12_ma3[i, 0] = low_prices[i, 2]
        
        # Momentum
        if i > 0:
            feature_12_momentum[i, 0] = low_prices[i, 2] - low_prices[i-1, 2]
    
    all_features.append(feature_12_ma3)
    all_features.append(feature_12_momentum)
    
    # 4. Feature_26 was important - identify and enhance
    # Feature_26 is at index 26-2=24 in the OHLC data
    # 24 // 4 = 6, 24 % 4 = 0, so it's the Open price of the 7th day (0-indexed)
    feature_26 = open_prices[:, 6:7]
    
    # Create variations of Feature_26
    feature_26_ma3 = np.zeros((lookback_window, 1))
    feature_26_momentum = np.zeros((lookback_window, 1))
    
    for i in range(lookback_window):
        # Moving average
        if i >= 2:
            feature_26_ma3[i, 0] = np.mean(open_prices[i-2:i+1, 6])
        else:
            feature_26_ma3[i, 0] = open_prices[i, 6]
        
        # Momentum
        if i > 0:
            feature_26_momentum[i, 0] = open_prices[i, 6] - open_prices[i-1, 6]
    
    all_features.append(feature_26_ma3)
    all_features.append(feature_26_momentum)
    
    # 5. Add minimal short interest features - keep it simple
    # Short interest momentum (change over time)
    si_momentum = np.zeros((lookback_window, 1))
    si_acceleration = np.zeros((lookback_window, 1))
    
    for i in range(1, lookback_window):
        si_momentum[i, 0] = short_interest[i, 0] - short_interest[i-1, 0]
        if i > 1:
            si_acceleration[i, 0] = si_momentum[i, 0] - si_momentum[i-1, 0]
    
    # Short interest to volume ratio (normalized)
    si_to_volume = short_interest / (avg_volume + 1e-8)
    
    all_features.append(si_momentum)
    all_features.append(si_acceleration)
    all_features.append(si_to_volume)
    
    # 6. Add simple technical indicators focusing on the important days identified
    # We'll focus on days 3, 7, and 9 (corresponding to Feature_12, Feature_26, Feature_35)
    
    # Simple moving averages for these specific days
    days_of_interest = [2, 6, 8]  # 0-indexed days 3, 7, 9
    for day in days_of_interest:
        # 5-day SMA of close prices
        ma5 = np.zeros((lookback_window, 1))
        for i in range(lookback_window):
            start_idx = max(0, day - 4)
            ma5[i, 0] = np.mean(close_prices[i, start_idx:day+1])
        all_features.append(ma5)
        
        # Price relative to SMA
        price_to_ma = close_prices[:, day:day+1] / (ma5 + 1e-8)
        all_features.append(price_to_ma)
    
    # 7. Add simple volatility measures for the important days
    for day in days_of_interest:
        # Daily true range
        tr = np.zeros((lookback_window, 1))
        for i in range(lookback_window):
            if day > 0:
                high_low = high_prices[i, day] - low_prices[i, day]
                high_close_prev = np.abs(high_prices[i, day] - close_prices[i, day-1])
                low_close_prev = np.abs(low_prices[i, day] - close_prices[i, day-1])
                tr[i, 0] = np.max([high_low, high_close_prev, low_close_prev])
            else:
                tr[i, 0] = high_prices[i, day] - low_prices[i, day]
        all_features.append(tr)
    
    # 8. Add simple volume features
    # Volume momentum
    vol_momentum = np.zeros((lookback_window, 1))
    for i in range(1, lookback_window):
        vol_momentum[i, 0] = avg_volume[i, 0] - avg_volume[i-1, 0]
    
    # Volume acceleration
    vol_acceleration = np.zeros((lookback_window, 1))
    for i in range(2, lookback_window):
        vol_acceleration[i, 0] = vol_momentum[i, 0] - vol_momentum[i-1, 0]
    
    all_features.append(vol_momentum)
    all_features.append(vol_acceleration)
    
    # 9. Add minimal interaction terms between important features
    # Interaction between short interest and Feature_35
    si_f35_interaction = short_interest * feature_35
    all_features.append(si_f35_interaction)
    
    # Interaction between short interest and Feature_12
    si_f12_interaction = short_interest * feature_12
    all_features.append(si_f12_interaction)
    
    # Interaction between short interest and Feature_26
    si_f26_interaction = short_interest * feature_26
    all_features.append(si_f26_interaction)
    
    # Interaction between volume and important features
    vol_f35_interaction = avg_volume * feature_35
    all_features.append(vol_f35_interaction)
    
    # 10. Add minimal non-linear transformations of important features
    # Log transformation of short interest (to capture diminishing returns)
    log_si = np.log1p(short_interest)
    all_features.append(log_si)
    
    # Square root transformation of important features
    sqrt_f35 = np.sqrt(np.abs(feature_35))
    sqrt_f12 = np.sqrt(np.abs(feature_12))
    sqrt_f26 = np.sqrt(np.abs(feature_26))
    
    all_features.append(sqrt_f35)
    all_features.append(sqrt_f12)
    all_features.append(sqrt_f26)
    
    # 11. Add minimal temporal features
    # Days since max/min short interest
    days_since_max_si = np.zeros((lookback_window, 1))
    days_since_min_si = np.zeros((lookback_window, 1))
    
    for i in range(lookback_window):
        if i > 0:
            max_idx = np.argmax(short_interest[:i+1, 0])
            min_idx = np.argmin(short_interest[:i+1, 0])
            days_since_max_si[i, 0] = i - max_idx
            days_since_min_si[i, 0] = i - min_idx
    
    all_features.append(days_since_max_si)
    all_features.append(days_since_min_si)
    
    # Concatenate all features
    result = np.concatenate([feat.reshape(lookback_window, -1) for feat in all_features], axis=1)
    
    # Final check for NaN values
    result = np.nan_to_num(result, nan=0.0)
    
    return result
```

Performance of this code: MAPE = 10.57%
Change from previous: -3.70%
Statistical Analysis: 67/93 features were significant (p < 0.05), 47 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 4):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 6.87%.

Based on the performance history, DL-based feature importance analysis, and previous code above, analyze what worked and what didn't, then create a new feature engineering approach that:
1. Learns from previous iterations' successes and failures
2. Analyzes the previous code to understand what features were attempted and their effectiveness
3. Builds upon successful feature patterns while avoiding problematic approaches
4. Considers financial domain knowledge (momentum, volatility, volume patterns, etc.)
5. Maintains LSTM-compatible time series structure
6. Uses DL-based feature importance insights to prioritize feature construction
7. Improves upon the previous iteration's approach

Requirements:
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 62) and returns a numpy array of shape (lookback_window, constructed_features)
2. The function should process each timestamp independently but maintain the temporal structure
3. Focus on the most predictive features for each time step, using DL-based feature importance as guidance
4. Consider financial domain knowledge (e.g., price momentum, volatility, volume patterns, etc.)
5. The output should be a 2D numpy array with shape (lookback_window, constructed_features)
6. Include comments explaining your feature engineering choices and how they address previous performance issues and importance insights
7. Make sure the code is production-ready and handles edge cases
8. DO NOT include any import statements - only use numpy (available as 'np') and built-in Python functions
9. The function must return a 2D array where each row represents features for one time step
10. Use numpy nan_to_num to handle NaN values
11. Analyze the previous iteration's code and explain in comments how your approach differs and improves upon it

Please provide ONLY the Python function code, no explanations outside the code comments.

Feature description: Stock short interest prediction with past short interest, volume, and OHLC data for iterative improvement
