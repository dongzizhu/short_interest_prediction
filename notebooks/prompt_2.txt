
You are a financial data scientist expert in feature engineering for Short Interest prediction models. 

I have financial time series data with the following structure:
- Shape: (samples, lookback_window=4, features=62)
- Features at each timestamp T include:
  1. Short interest at time T reported every 15 days (1 dimension)
  2. Average daily volume quantity of past 15 days (1 dimension) 
  3. OHLC (Open, High, Low, Close) prices for past 15 days (4 × 15 = 60 dimensions)

Total: 1 + 1 + 60 = 62 features(dimensions) per timestamp.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 5.85%
  Features: All 62 original features
  Statistical Analysis:
    • Total features: 62
    • Significant features (p < 0.05): 27
    • Highly significant features (p < 0.01): 21
    • Top significant features: Feature_0, Feature_1, Feature_2
    • Most significant feature: Feature_60 (p=0.0000)

Iteration 1: Iteration 1 - MAPE: 5.47% (Improvement: +0.4%)
  Features: fallback feature engineering
  Statistical Analysis:
    • Total features: 15
    • Significant features (p < 0.05): 2
    • Highly significant features (p < 0.01): 2
    • Top significant features: Feature_4, Feature_5
    • Most significant feature: Feature_5 (p=0.0030)




STATISTICAL INSIGHTS FROM BEST MODEL (MAPE: 5.47%):
- Most predictive features (lowest p-values): Feature_5 (p=0.0030), Feature_4 (p=0.0070), Feature_11 (p=0.1048), Feature_3 (p=0.1317), Feature_2 (p=0.1512)
- Least predictive features (highest p-values): Feature_1 (p=0.9993), Feature_7 (p=0.9137), Feature_14 (p=0.6707)
- Feature significance ratio: 2/15 features are statistically significant




ERROR FEEDBACK FROM PREVIOUS ATTEMPTS:
The following errors occurred in previous attempts. Please analyze these errors and ensure your code avoids these issues:

Error 1:
  • Error Type: NoResponse
  • Error Message: No response from Claude (attempt 1/3)

Error 2:
  • Error Type: NoResponse
  • Error Message: No response from Claude (attempt 2/3)

IMPORTANT: Your new code must avoid these specific errors. Pay special attention to:
- Array dimension mismatches and shape issues
- Proper handling of edge cases and NaN values
- Correct return value format (2D numpy array)
- Robust error handling within the function




CURRENT TASK (Iteration 2):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 5.47%.

Based on the performance history, statistical analysis, and previous code above, analyze what worked and what didn't, then create a new feature engineering approach that:
1. Learns from previous iterations' successes and failures
2. Analyzes the previous code to understand what features were attempted and their effectiveness
3. Builds upon successful feature patterns while avoiding problematic approaches
4. Considers financial domain knowledge (momentum, volatility, volume patterns, etc.)
5. Maintains LSTM-compatible time series structure
6. Uses p-value insights to prioritize feature construction
7. Improves upon the previous iteration's approach

Requirements:
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 62) and returns a numpy array of shape (lookback_window, constructed_features)
2. The function should process each timestamp independently but maintain the temporal structure
3. Focus on the most predictive features for each time step, using statistical significance as guidance
4. Consider financial domain knowledge (e.g., price momentum, volatility, volume patterns, etc.)
5. The output should be a 2D numpy array with shape (lookback_window, constructed_features)
6. Include comments explaining your feature engineering choices and how they address previous performance issues and statistical insights
7. Make sure the code is production-ready and handles edge cases
8. DO NOT include any import statements - only use numpy (available as 'np') and built-in Python functions
9. The function must return a 2D array where each row represents features for one time step
10. Use numpy nan_to_num to handle NaN values
11. Analyze the previous iteration's code and explain in comments how your approach differs and improves upon it

Please provide ONLY the Python function code, no explanations outside the code comments.

Feature description: Stock short interest prediction with past short interest, volume, and OHLC data for iterative improvement
