
You are a financial data scientist expert in feature engineering for Short Interest prediction models. 

I have financial time series data with the following structure:
- Shape: (samples, lookback_window=4, features=62)
- Features at each timestamp T include:
  1. Short interest at time T reported every 15 days (1 dimension)
  2. Average daily volume quantity of past 15 days (1 dimension) 
  3. OHLC (Open, High, Low, Close) prices for past 15 days (4 × 15 = 60 dimensions)

Total: 1 + 1 + 60 = 62 features(dimensions) per timestamp.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 17.25%
  Features: All 62 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_1 (importance=0.0003), Feature_48 (importance=0.0003), Feature_40 (importance=0.0003), Feature_27 (importance=0.0002), Feature_10 (importance=0.0002)

Iteration 1: Iteration 1 - MAPE: 18.14% (Improvement: -0.9%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_8 (importance=0.0238), Feature_16 (importance=0.0194), Feature_13 (importance=0.0135), Feature_11 (importance=0.0102), Feature_7 (importance=0.0082)




DL-BASED FEATURE IMPORTANCE INSIGHTS FROM BEST MODEL (MAPE: 17.25%):
- Most important features: Feature_1 (importance=0.0003), Feature_48 (importance=0.0003), Feature_40 (importance=0.0003), Feature_27 (importance=0.0002), Feature_10 (importance=0.0002)
- Least important features: Feature_22 (importance=-0.0002), Feature_60 (importance=-0.0002), Feature_30 (importance=-0.0001)






PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 1):

```python
def construct_features(data):
    """
    Constructs features for short interest prediction based on historical performance analysis.
    
    Args:
        data: numpy array of shape (lookback_window, 62)
            - data[:, 0]: Short interest
            - data[:, 1]: Average daily volume
            - data[:, 2:62]: OHLC prices for past 15 days (4 features × 15 days)
    
    Returns:
        numpy array of shape (lookback_window, constructed_features)
    """
    lookback_window = data.shape[0]
    
    # Handle NaN values
    data = np.nan_to_num(data, nan=0.0)
    
    # Extract key components
    short_interest = data[:, 0]
    avg_volume = data[:, 1]
    
    # Reshape OHLC data for easier processing
    # Original format: 60 columns (4 OHLC × 15 days flattened)
    # New format: (lookback_window, 15, 4) where 4 is OHLC
    ohlc_data = np.zeros((lookback_window, 15, 4))
    for i in range(15):
        ohlc_data[:, i, 0] = data[:, 2 + i*4]     # Open
        ohlc_data[:, i, 1] = data[:, 2 + i*4 + 1] # High
        ohlc_data[:, i, 2] = data[:, 2 + i*4 + 2] # Low
        ohlc_data[:, i, 3] = data[:, 2 + i*4 + 3] # Close
    
    # Initialize feature list
    feature_list = []
    
    # 1. Keep original short interest (Feature_1 was highly important)
    feature_list.append(short_interest.reshape(lookback_window, 1))
    
    # 2. Short interest momentum (rate of change)
    si_momentum = np.zeros((lookback_window, 1))
    si_momentum[1:, 0] = (short_interest[1:] - short_interest[:-1]) / (short_interest[:-1] + 1e-8)
    feature_list.append(si_momentum)
    
    # 3. Short interest acceleration
    si_accel = np.zeros((lookback_window, 1))
    if lookback_window > 2:
        prev_momentum = np.zeros(lookback_window-1)
        prev_momentum[1:] = (short_interest[1:-1] - short_interest[:-2]) / (short_interest[:-2] + 1e-8)
        prev_momentum[0] = 0
        si_accel[1:, 0] = si_momentum[1:, 0] - prev_momentum
    feature_list.append(si_accel)
    
    # 4. Volume features (Feature_48 was important)
    # Normalized volume
    norm_volume = avg_volume / (np.mean(avg_volume) + 1e-8)
    feature_list.append(norm_volume.reshape(lookback_window, 1))
    
    # Volume momentum
    vol_momentum = np.zeros((lookback_window, 1))
    vol_momentum[1:, 0] = (avg_volume[1:] - avg_volume[:-1]) / (avg_volume[:-1] + 1e-8)
    feature_list.append(vol_momentum)
    
    # 5. Price-based features (Feature_40, Feature_27, Feature_10 were important)
    # Extract close prices for each day
    close_prices = ohlc_data[:, :, 3]  # All close prices
    
    # Calculate returns for each day
    returns = np.zeros((lookback_window, 15))
    for i in range(15):
        if i > 0:
            returns[:, i] = (close_prices[:, i] - close_prices[:, i-1]) / (close_prices[:, i-1] + 1e-8)
    
    # Average return over different timeframes
    avg_return_5d = np.mean(returns[:, -5:], axis=1, keepdims=True)
    avg_return_10d = np.mean(returns[:, -10:], axis=1, keepdims=True)
    avg_return_15d = np.mean(returns[:, -15:], axis=1, keepdims=True)
    feature_list.extend([avg_return_5d, avg_return_10d, avg_return_15d])
    
    # 6. Volatility features
    volatility_5d = np.std(returns[:, -5:], axis=1, keepdims=True)
    volatility_10d = np.std(returns[:, -10:], axis=1, keepdims=True)
    volatility_15d = np.std(returns[:, -15:], axis=1, keepdims=True)
    feature_list.extend([volatility_5d, volatility_10d, volatility_15d])
    
    # 7. Price momentum (using close prices)
    # Last day close price for each timestamp
    last_close = close_prices[:, -1].reshape(lookback_window, 1)
    
    # 5-day momentum
    momentum_5d = (last_close - close_prices[:, -5].reshape(lookback_window, 1)) / (close_prices[:, -5].reshape(lookback_window, 1) + 1e-8)
    
    # 10-day momentum
    momentum_10d = (last_close - close_prices[:, -10].reshape(lookback_window, 1)) / (close_prices[:, -10].reshape(lookback_window, 1) + 1e-8)
    
    # 15-day momentum
    momentum_15d = (last_close - close_prices[:, -15].reshape(lookback_window, 1)) / (close_prices[:, -15].reshape(lookback_window, 1) + 1e-8)
    
    feature_list.extend([momentum_5d, momentum_10d, momentum_15d])
    
    # 8. Price range features
    # Calculate daily trading ranges (High-Low)/Open
    daily_ranges = (ohlc_data[:, :, 1] - ohlc_data[:, :, 2]) / (ohlc_data[:, :, 0] + 1e-8)
    avg_range_5d = np.mean(daily_ranges[:, -5:], axis=1, keepdims=True)
    avg_range_10d = np.mean(daily_ranges[:, -10:], axis=1, keepdims=True)
    avg_range_15d = np.mean(daily_ranges[:, -15:], axis=1, keepdims=True)
    feature_list.extend([avg_range_5d, avg_range_10d, avg_range_15d])
    
    # 9. Short interest to volume ratio (important relationship)
    si_volume_ratio = short_interest / (avg_volume + 1e-8)
    feature_list.append(si_volume_ratio.reshape(lookback_window, 1))
    
    # 10. Technical indicators
    # Simple Moving Averages of close prices
    sma_5 = np.mean(close_prices[:, -5:], axis=1, keepdims=True)
    sma_10 = np.mean(close_prices[:, -10:], axis=1, keepdims=True)
    sma_15 = np.mean(close_prices[:, -15:], axis=1, keepdims=True)
    
    # SMA ratios (momentum indicators)
    sma_ratio_5_10 = sma_5 / (sma_10 + 1e-8)
    sma_ratio_5_15 = sma_5 / (sma_15 + 1e-8)
    feature_list.extend([sma_ratio_5_10, sma_ratio_5_15])
    
    # 11. Relative Strength Index (RSI)-like feature for 14 periods
    # Using a simplified version since we don't have full history
    gains = np.zeros((lookback_window, 14))
    losses = np.zeros((lookback_window, 14))
    
    for i in range(14):
        if i+1 < 15:  # Ensure we don't go out of bounds
            day_returns = returns[:, i+1]
            gains[:, i] = np.maximum(0, day_returns)
            losses[:, i] = np.maximum(0, -day_returns)
    
    avg_gain = np.mean(gains, axis=1, keepdims=True)
    avg_loss = np.mean(losses, axis=1, keepdims=True)
    
    # Calculate RSI
    rs = avg_gain / (avg_loss + 1e-8)
    rsi = 100 - (100 / (1 + rs))
    feature_list.append(rsi)
    
    # 12. Combine all features
    combined_features = np.hstack(feature_list)
    
    # Final check for NaN values
    combined_features = np.nan_to_num(combined_features, nan=0.0)
    
    return combined_features
```

Performance of this code: MAPE = 18.14%
Change from previous: -0.90%
Statistical Analysis: 21/21 features were significant (p < 0.05), 20 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 2):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 17.25%.

Based on the performance history, DL-based feature importance analysis, and previous code above, analyze what worked and what didn't, then create a new feature engineering approach that:
1. Learns from previous iterations' successes and failures
2. Analyzes the previous code to understand what features were attempted and their effectiveness
3. Builds upon successful feature patterns while avoiding problematic approaches
4. Considers financial domain knowledge (momentum, volatility, volume patterns, etc.)
5. Maintains LSTM-compatible time series structure
6. Uses DL-based feature importance insights to prioritize feature construction
7. Improves upon the previous iteration's approach

Requirements:
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 62) and returns a numpy array of shape (lookback_window, constructed_features)
2. The function should process each timestamp independently but maintain the temporal structure
3. Focus on the most predictive features for each time step, using DL-based feature importance as guidance
4. Consider financial domain knowledge (e.g., price momentum, volatility, volume patterns, etc.)
5. The output should be a 2D numpy array with shape (lookback_window, constructed_features)
6. Include comments explaining your feature engineering choices and how they address previous performance issues and importance insights
7. Make sure the code is production-ready and handles edge cases
8. DO NOT include any import statements - only use numpy (available as 'np') and built-in Python functions
9. The function must return a 2D array where each row represents features for one time step
10. Use numpy nan_to_num to handle NaN values
11. Analyze the previous iteration's code and explain in comments how your approach differs and improves upon it

Please provide ONLY the Python function code, no explanations outside the code comments.

Feature description: Stock short interest prediction with past short interest, volume, and OHLC data for iterative improvement


PREVIOUS CODE ATTEMPT:
def construct_features(data):
    """
    Constructs features for short interest prediction based on historical performance analysis.
    
    Args:
        data: numpy array of shape (lookback_window, 62)
            - data[:, 0]: Short interest
            - data[:, 1]: Average daily volume
            - data[:, 2:62]: OHLC prices for past 15 days (4 features × 15 days)
    
    Returns:
        numpy array of shape (lookback_window, constructed_features)
    """
    lookback_window = data.shape[0]
    
    # Handle NaN values
    data = np.nan_to_num(data, nan=0.0)
    
    # Extract key components
    short_interest = data[:, 0]
    avg_volume = data[:, 1]
    
    # Reshape OHLC data for easier processing
    # Original format: 60 columns (4 OHLC × 15 days flattened)
    # New format: (lookback_window, 15, 4) where 4 is OHLC
    ohlc_data = np.zeros((lookback_window, 15, 4))
    for i in range(15):
        ohlc_data[:, i, 0] = data[:, 2 + i*4]     # Open
        ohlc_data[:, i, 1] = data[:, 2 + i*4 + 1] # High
        ohlc_data[:, i, 2] = data[:, 2 + i*4 + 2] # Low
        ohlc_data[:, i, 3] = data[:, 2 + i*4 + 3] # Close
    
    # Initialize feature list
    feature_list = []
    
    # 1. Keep original short interest (Feature_1 was highly important)
    feature_list.append(short_interest.reshape(lookback_window, 1))
    
    # 2. Short interest momentum (rate of change)
    si_momentum = np.zeros((lookback_window, 1))
    si_momentum[1:, 0] = (short_interest[1:] - short_interest[:-1]) / (short_interest[:-1] + 1e-8)
    feature_list.append(si_momentum)
    
    # 3. Short interest acceleration
    si_accel = np.zeros((lookback_window, 1))
    if lookback_window > 2:
        prev_momentum = np.zeros(lookback_window-1)
        prev_momentum[1:] = (short_interest[1:-1] - short_interest[:-2]) / (short_interest[:-2] + 1e-8)
        prev_momentum[0] = 0
        si_accel[1:, 0] = si_momentum[1:, 0] - prev_momentum
    feature_list.append(si_accel)
    
    # 4. Volume features (Feature_48 was important)
    # Normalized volume
    norm_volume = avg_volume / (np.mean(avg_volume) + 1e-8)
    feature_list.append(norm_volume.reshape(lookback_window, 1))
    
    # Volume momentum
    vol_momentum = np.zeros((lookback_window, 1))
    vol_momentum[1:, 0] = (avg_volume[1:] - avg_volume[:-1]) / (avg_volume[:-1] + 1e-8)
    feature_list.append(vol_momentum)
    
    # 5. Price-based features (Feature_40, Feature_27, Feature_10 were important)
    # Extract close prices for each day
    close_prices = ohlc_data[:, :, 3]  # All close prices
    
    # Calculate returns for each day
    returns = np.zeros((lookback_window, 15))
    for i in range(15):
        if i > 0:
            returns[:, i] = (close_prices[:, i] - close_prices[:, i-1]) / (close_prices[:, i-1] + 1e-8)
    
    # Average return over different timeframes
    avg_return_5d = np.mean(returns[:, -5:], axis=1, keepdims=True)
    avg_return_10d = np.mean(returns[:, -10:], axis=1, keepdims=True)
    avg_return_15d = np.mean(returns[:, -15:], axis=1, keepdims=True)
    feature_list.extend([avg_return_5d, avg_return_10d, avg_return_15d])
    
    # 6. Volatility features
    volatility_5d = np.std(returns[:, -5:], axis=1, keepdims=True)
    volatility_10d = np.std(returns[:, -10:], axis=1, keepdims=True)
    volatility_15d = np.std(returns[:, -15:], axis=1, keepdims=True)
    feature_list.extend([volatility_5d, volatility_10d, volatility_15d])
    
    # 7. Price momentum (using close prices)
    # Last day close price for each timestamp
    last_close = close_prices[:, -1].reshape(lookback_window, 1)
    
    # 5-day momentum
    momentum_5d = (last_close - close_prices[:, -5].reshape(lookback_window, 1)) / (close_prices[:, -5].reshape(lookback_window, 1) + 1e-8)
    
    # 10-day momentum
    momentum_10d = (last_close - close_prices[:, -10].reshape(lookback_window, 1)) / (close_prices[:, -10].reshape(lookback_window, 1) + 1e-8)
    
    # 15-day momentum
    momentum_15d = (last_close - close_prices[:, -15].reshape(lookback_window, 1)) / (close_prices[:, -15].reshape(lookback_window, 1) + 1e-8)
    
    feature_list.extend([momentum_5d, momentum_10d, momentum_15d])
    
    # 8. Price range features
    # Calculate daily trading ranges (High-Low)/Open
    daily_ranges = (ohlc_data[:, :, 1] - ohlc_data[:, :, 2]) / (ohlc_data[:, :, 0] + 1e-8)
    avg_range_5d = np.mean(daily_ranges[:, -5:], axis=1, keepdims=True)
    avg_range_10d = np.mean(daily_ranges[:, -10:], axis=1, keepdims=True)
    avg_range_15d = np.mean(daily_ranges[:, -15:], axis=1, keepdims=True)
    feature_list.extend([avg_range_5d, avg_range_10d, avg_range_15d])
    
    # 9. Short interest to volume ratio (important relationship)
    si_volume_ratio = short_interest / (avg_volume + 1e-8)
    feature_list.append(si_volume_ratio.reshape(lookback_window, 1))
    
    # 10. Technical indicators
    # Simple Moving Averages of close prices
    sma_5 = np.mean(close_prices[:, -5:], axis=1, keepdims=True)
    sma_10 = np.mean(close_prices[:, -10:], axis=1, keepdims=True)
    sma_15 = np.mean(close_prices[:, -15:], axis=1, keepdims=True)
    
    # SMA ratios (momentum indicators)
    sma_ratio_5_10 = sma_5 / (sma_10 + 1e-8)
    sma_ratio_5_15 = sma_5 / (sma_15 + 1e-8)
    feature_list.extend([sma_ratio_5_10, sma_ratio_5_15])
    
    # 11. Relative Strength Index (RSI)-like feature for 14 periods
    # Using a simplified version since we don't have full history
    gains = np.zeros((lookback_window, 14))
    losses = np.zeros((lookback_window, 14))
    
    for i in range(14):
        if i+1 < 15:  # Ensure we don't go out of bounds
            day_returns = returns[:, i+1]
            gains[:, i] = np.maximum(0, day_returns)
            losses[:, i] = np.maximum(0, -day_returns)
    
    avg_gain = np.mean(gains, axis=1, keepdims=True)
    avg_loss = np.mean(losses, axis=1, keepdims=True)
    
    # Calculate RSI
    rs = avg_gain / (avg_loss + 1e-8)
    rsi = 100 - (100 / (1 + rs))
    feature_list.append(rsi)
    
    # 12. Combine all features
    combined_features = np.hstack(feature_list)
    
    # Final check for NaN values
    combined_features = np.nan_to_num(combined_features, nan=0.0)
    
    return combined_features

