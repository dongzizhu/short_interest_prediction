
You are a financial data scientist expert in feature engineering for Short Interest prediction models. 

I have financial time series data with the following structure:
- Shape: (samples, lookback_window=4, features=62)
- Features at each timestamp T include:
  1. Short interest at time T reported every 15 days (1 dimension)
  2. Average daily volume quantity of past 15 days (1 dimension) 
  3. OHLC (Open, High, Low, Close) prices for past 15 days (4 × 15 = 60 dimensions)

Total: 1 + 1 + 60 = 62 features(dimensions) per timestamp.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 6.87%
  Features: All 62 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_35 (importance=0.0001), Feature_0 (importance=0.0001), Feature_12 (importance=0.0001), Feature_26 (importance=0.0000), Feature_1 (importance=0.0000)

Iteration 1: Iteration 1 - MAPE: 8.25% (Improvement: -1.4%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_97 (importance=0.0010), Feature_98 (importance=0.0006), Feature_66 (importance=0.0002), Feature_12 (importance=0.0002), Feature_145 (importance=0.0002)

Iteration 2: Iteration 2 - MAPE: 8.67% (Improvement: -1.8%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_22 (importance=0.0017), Feature_23 (importance=0.0013), Feature_113 (importance=0.0005), Feature_43 (importance=0.0005), Feature_8 (importance=0.0005)

Iteration 3: Iteration 3 - MAPE: 10.57% (Improvement: -3.7%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_71 (importance=0.0033), Feature_77 (importance=0.0027), Feature_82 (importance=0.0016), Feature_69 (importance=0.0016), Feature_78 (importance=0.0011)

Iteration 4: Iteration 4 - MAPE: 9.63% (Improvement: -2.8%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_67 (importance=0.0025), Feature_51 (importance=0.0014), Feature_79 (importance=0.0010), Feature_0 (importance=0.0010), Feature_77 (importance=0.0009)




DL-BASED FEATURE IMPORTANCE INSIGHTS FROM BEST MODEL (MAPE: 6.87%):
- Most important features: Feature_35 (importance=0.0001), Feature_0 (importance=0.0001), Feature_12 (importance=0.0001), Feature_26 (importance=0.0000), Feature_1 (importance=0.0000)
- Least important features: Feature_52 (importance=-0.0000), Feature_47 (importance=-0.0000), Feature_14 (importance=-0.0000)






PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 4):

```python
def construct_features(data):
    """
    Constructs engineered features for short interest prediction.
    
    Args:
        data: numpy array of shape (lookback_window, 62)
              where data[:, 0] = short interest
                    data[:, 1] = average daily volume
                    data[:, 2:62] = OHLC prices for past 15 days (4 features × 15 days)
    
    Returns:
        numpy array of shape (lookback_window, constructed_features)
    """
    lookback_window = data.shape[0]
    
    # Handle NaN values
    data = np.nan_to_num(data, nan=0.0)
    
    # Extract key components
    short_interest = data[:, 0:1]  # Feature_0 was identified as important
    avg_volume = data[:, 1:2]
    
    # Reshape OHLC data for easier manipulation
    # Each day has 4 values (OHLC), and we have 15 days of data
    ohlc_data = data[:, 2:62].reshape(lookback_window, 15, 4)
    
    # Extract OHLC components
    open_prices = ohlc_data[:, :, 0]
    high_prices = ohlc_data[:, :, 1]
    low_prices = ohlc_data[:, :, 2]
    close_prices = ohlc_data[:, :, 3]
    
    # Initialize list to store all features
    all_features = []
    
    # ANALYSIS: The baseline model (6.87% MAPE) outperformed all subsequent iterations.
    # This suggests we should keep the original features and be very selective with transformations.
    # Feature_35, Feature_0, Feature_12, Feature_26, Feature_1 were most important in baseline.
    
    # 1. Keep ALL original features - they performed best in baseline
    all_features.append(data)  # All original 62 features
    
    # 2. Focus on Feature_35 (High price of 9th day)
    # Feature_35 is at index 35-2=33 in the OHLC data (after removing SI and volume)
    # 33 // 4 = 8, 33 % 4 = 1, so it's the High price of the 9th day (0-indexed)
    feature_35 = high_prices[:, 8:9]
    
    # 3. Focus on Feature_12 (Low price of 3rd day)
    # 10 // 4 = 2, 10 % 4 = 2, so it's the Low price of the 3rd day (0-indexed)
    feature_12 = low_prices[:, 2:3]
    
    # 4. Focus on Feature_26 (Open price of 7th day)
    # 24 // 4 = 6, 24 % 4 = 0, so it's the Open price of the 7th day (0-indexed)
    feature_26 = open_prices[:, 6:7]
    
    # 5. Add minimal transformations of the most important features
    # Instead of complex transformations, we'll focus on simple, financially meaningful ones
    
    # Relative price changes for important features (percentage change)
    f35_pct_change = np.zeros((lookback_window, 1))
    f12_pct_change = np.zeros((lookback_window, 1))
    f26_pct_change = np.zeros((lookback_window, 1))
    
    for i in range(1, lookback_window):
        if feature_35[i-1, 0] != 0:
            f35_pct_change[i, 0] = (feature_35[i, 0] - feature_35[i-1, 0]) / feature_35[i-1, 0]
        if feature_12[i-1, 0] != 0:
            f12_pct_change[i, 0] = (feature_12[i, 0] - feature_12[i-1, 0]) / feature_12[i-1, 0]
        if feature_26[i-1, 0] != 0:
            f26_pct_change[i, 0] = (feature_26[i, 0] - feature_26[i-1, 0]) / feature_26[i-1, 0]
    
    all_features.append(f35_pct_change)
    all_features.append(f12_pct_change)
    all_features.append(f26_pct_change)
    
    # 6. Short interest features - simple and focused
    # Short interest relative change
    si_pct_change = np.zeros((lookback_window, 1))
    for i in range(1, lookback_window):
        if short_interest[i-1, 0] != 0:
            si_pct_change[i, 0] = (short_interest[i, 0] - short_interest[i-1, 0]) / short_interest[i-1, 0]
    
    all_features.append(si_pct_change)
    
    # 7. Volume features - simple and focused
    # Volume relative change
    vol_pct_change = np.zeros((lookback_window, 1))
    for i in range(1, lookback_window):
        if avg_volume[i-1, 0] != 0:
            vol_pct_change[i, 0] = (avg_volume[i, 0] - avg_volume[i-1, 0]) / avg_volume[i-1, 0]
    
    all_features.append(vol_pct_change)
    
    # 8. Normalized short interest to volume ratio
    # This can be a key indicator for potential short squeezes
    si_to_volume = short_interest / (avg_volume + 1e-8)
    all_features.append(si_to_volume)
    
    # 9. Add minimal interaction terms between important features
    # Interaction between short interest and Feature_35
    si_f35_interaction = short_interest * feature_35
    all_features.append(si_f35_interaction)
    
    # 10. Add minimal non-linear transformations of important features
    # Log transformation of short interest (to capture diminishing returns)
    log_si = np.log1p(short_interest)
    all_features.append(log_si)
    
    # 11. Add simple volatility measures for the important days
    # Days of interest (0-indexed): 3rd day (2), 7th day (6), 9th day (8)
    days_of_interest = [2, 6, 8]
    
    for day in days_of_interest:
        # Daily true range - a measure of volatility
        tr = np.zeros((lookback_window, 1))
        for i in range(lookback_window):
            high_low = high_prices[i, day] - low_prices[i, day]
            if day > 0:
                high_close_prev = np.abs(high_prices[i, day] - close_prices[i, day-1])
                low_close_prev = np.abs(low_prices[i, day] - close_prices[i, day-1])
                tr[i, 0] = np.max([high_low, high_close_prev, low_close_prev])
            else:
                tr[i, 0] = high_low
        
        # Normalize by close price to get relative volatility
        rel_tr = tr / (close_prices[:, day:day+1] + 1e-8)
        all_features.append(rel_tr)
    
    # 12. Add simple price momentum indicators for important days
    for day in days_of_interest:
        # Rate of change (ROC) - momentum indicator
        roc = np.zeros((lookback_window, 1))
        for i in range(lookback_window):
            if day > 0:
                if close_prices[i, day-1] != 0:
                    roc[i, 0] = (close_prices[i, day] - close_prices[i, day-1]) / close_prices[i, day-1]
        all_features.append(roc)
    
    # 13. Add simple moving averages for important days
    for day in days_of_interest:
        # 3-day simple moving average
        ma3 = np.zeros((lookback_window, 1))
        for i in range(lookback_window):
            start_idx = max(0, day - 2)
            ma3[i, 0] = np.mean(close_prices[i, start_idx:day+1])
        
        # Price relative to moving average
        price_to_ma = close_prices[:, day:day+1] / (ma3 + 1e-8)
        all_features.append(price_to_ma)
    
    # 14. Add simple relative strength indicators for important days
    for day in days_of_interest:
        # Simple RSI calculation (simplified)
        rsi = np.zeros((lookback_window, 1))
        for i in range(1, lookback_window):
            if day > 0:
                gain = max(0, close_prices[i, day] - close_prices[i, day-1])
                loss = max(0, close_prices[i, day-1] - close_prices[i, day])
                if gain + loss > 0:
                    rsi[i, 0] = gain / (gain + loss)
        all_features.append(rsi)
    
    # 15. Add simple trend indicators
    # Linear regression slope for short interest
    si_slope = np.zeros((lookback_window, 1))
    for i in range(3, lookback_window):
        y = short_interest[i-3:i+1, 0]
        x = np.arange(4)
        # Simple linear regression slope calculation
        si_slope[i, 0] = np.sum((x - np.mean(x)) * (y - np.mean(y))) / (np.sum((x - np.mean(x))**2) + 1e-8)
    all_features.append(si_slope)
    
    # 16. Add simple statistical features
    # Z-score of short interest (how many standard deviations from mean)
    si_zscore = np.zeros((lookback_window, 1))
    for i in range(3, lookback_window):
        window = short_interest[i-3:i+1, 0]
        mean = np.mean(window)
        std = np.std(window)
        if std > 0:
            si_zscore[i, 0] = (short_interest[i, 0] - mean) / std
    all_features.append(si_zscore)
    
    # 17. Add simple ratio features
    # High-Low ratio for important days
    for day in days_of_interest:
        hl_ratio = high_prices[:, day:day+1] / (low_prices[:, day:day+1] + 1e-8)
        all_features.append(hl_ratio)
    
    # 18. Add simple distance features
    # Distance from short interest to its moving average
    si_ma3 = np.zeros((lookback_window, 1))
    for i in range(lookback_window):
        start_idx = max(0, i - 2)
        si_ma3[i, 0] = np.mean(short_interest[start_idx:i+1, 0])
    
    si_distance_to_ma = (short_interest - si_ma3) / (si_ma3 + 1e-8)
    all_features.append(si_distance_to_ma)
    
    # Concatenate all features
    result = np.concatenate([feat.reshape(lookback_window, -1) for feat in all_features], axis=1)
    
    # Final check for NaN values
    result = np.nan_to_num(result, nan=0.0)
    
    return result
```

Performance of this code: MAPE = 9.63%
Change from previous: -2.76%
Statistical Analysis: 64/88 features were significant (p < 0.05), 42 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 5):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 6.87%.

Based on the performance history, DL-based feature importance analysis, and previous code above, analyze what worked and what didn't, then create a new feature engineering approach that:
1. Learns from previous iterations' successes and failures
2. Analyzes the previous code to understand what features were attempted and their effectiveness
3. Builds upon successful feature patterns while avoiding problematic approaches
4. Considers financial domain knowledge (momentum, volatility, volume patterns, etc.)
5. Maintains LSTM-compatible time series structure
6. Uses DL-based feature importance insights to prioritize feature construction
7. Improves upon the previous iteration's approach

Requirements:
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 62) and returns a numpy array of shape (lookback_window, constructed_features)
2. The function should process each timestamp independently but maintain the temporal structure
3. Focus on the most predictive features for each time step, using DL-based feature importance as guidance
4. Consider financial domain knowledge (e.g., price momentum, volatility, volume patterns, etc.)
5. The output should be a 2D numpy array with shape (lookback_window, constructed_features)
6. Include comments explaining your feature engineering choices and how they address previous performance issues and importance insights
7. Make sure the code is production-ready and handles edge cases
8. DO NOT include any import statements - only use numpy (available as 'np') and built-in Python functions
9. The function must return a 2D array where each row represents features for one time step
10. Use numpy nan_to_num to handle NaN values
11. Analyze the previous iteration's code and explain in comments how your approach differs and improves upon it

Please provide ONLY the Python function code, no explanations outside the code comments.

Feature description: Stock short interest prediction with past short interest, volume, and OHLC data for iterative improvement
