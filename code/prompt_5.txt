
You are a financial data scientist specializing in **feature engineering for short-interest prediction** on equity time series.

## Data schema
- Input to your function: a **numpy array** `data` with shape **(lookback_window, 62)** for a *single* sample.
- Feature layout at each timestep `t`:
  - `data[t, 0]` → **short interest** at time *T* (reported every 15 days)
  - `data[t, 1]` → **average daily volume (past 15 days)**
  - `data[t, 2:62]` → **OHLC** over the past 15 days, flattened as **15 days × 4 columns** in order **[O, H, L, C]**  
    Use: `ohlc = data[t, 2:].reshape(15, 4)` → `open, high, low, close = ohlc[:,0], ohlc[:,1], ohlc[:,2], ohlc[:,3]`.

Total: 1 + 1 + 60 = 62 features per timestamp.

## Dataset constraints
- Only ~180 total samples available (very small).
- To reduce overfitting: **keep only the useful raw channels** and add **new features** so that **(kept raw + new) ≤ 25 total columns**.
- You **may drop** raw channels with consistently low importance or redundancy after the second iteration.
- Avoid redundant or near-duplicate engineered features. Prefer a small, diverse set.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 7.37%
  Features: All 62 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_6_t3 (importance=0.0009), Feature_1_t3 (importance=0.0009), Feature_35_t3 (importance=0.0007), Feature_3_t3 (importance=0.0007), Feature_0_t0 (importance=0.0006)

Iteration 1: Iteration 1 - MAPE: 8.67% (Improvement Over Baseline: -1.3%) (Improvement Over Last: -1.3%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_6_t3 (importance=0.0079), Feature_14_t1 (importance=0.0042), Feature_1_t1 (importance=0.0035), Feature_18_t0 (importance=0.0027), Feature_11_t0 (importance=0.0025)

Iteration 2: Iteration 2 - MAPE: 9.52% (Improvement Over Baseline: -2.1%) (Improvement Over Last: -0.8%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_10_t3 (importance=0.0144), Feature_17_t3 (importance=0.0089), Feature_9_t3 (importance=0.0049), Feature_2_t1 (importance=0.0044), Feature_16_t1 (importance=0.0039)

Iteration 3: Iteration 3 - MAPE: 8.22% (Improvement Over Baseline: -0.8%) (Improvement Over Last: +1.3%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_17_t2 (importance=0.0072), Feature_15_t0 (importance=0.0049), Feature_8_t3 (importance=0.0032), Feature_19_t3 (importance=0.0030), Feature_15_t1 (importance=0.0028)

Iteration 4: Iteration 4 - MAPE: 6.60% (Improvement Over Baseline: +0.8%) (Improvement Over Last: +1.6%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_8_t2 (importance=0.0042), Feature_17_t3 (importance=0.0042), Feature_11_t3 (importance=0.0040), Feature_15_t0 (importance=0.0038), Feature_19_t3 (importance=0.0036)







ERROR FEEDBACK FROM PREVIOUS ATTEMPTS:
The following errors occurred in previous attempts. Please analyze these errors and ensure your code avoids these issues:

Error 1:
  • Error Type: ExecutionError
  • Error Message: Function execution failed (attempt 1/3)
  • Problematic Code: def construct_features(data):
    RAW_DIM = 62
    MAX_TOTAL = 25
    
    lookback_window = data.shape[0]
    features = np.zeros((lookback_window, MAX_TOTAL), dtype=np.float32)
    
    for t in ran...

IMPORTANT: Your new code must avoid these specific errors. Pay special attention to:
- Array dimension mismatches and shape issues
- Proper handling of edge cases and NaN values
- Correct return value format (2D numpy array)
- Robust error handling within the function




PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 4):

```python
def construct_features(data):
    RAW_DIM = 62
    MAX_TOTAL = 25
    
    lookback_window = data.shape[0]
    features = np.zeros((lookback_window, MAX_TOTAL), dtype=np.float32)
    
    for t in range(lookback_window):
        # Extract raw data for this timestep
        short_interest = data[t, 0]
        avg_volume = data[t, 1]
        ohlc = data[t, 2:].reshape(15, 4)
        open_prices, high_prices, low_prices, close_prices = ohlc[:, 0], ohlc[:, 1], ohlc[:, 2], ohlc[:, 3]
        
        # Keep essential raw features based on importance analysis
        raw_keep = [
            short_interest,  # Always keep short interest (highest importance)
            avg_volume,      # Always keep average volume (high importance)
            close_prices[-1],  # Most recent close price
            high_prices[-1],   # Most recent high price
            low_prices[-1],    # Most recent low price
        ]
        
        # Calculate MAX_NEW based on raw features kept
        MAX_NEW = MAX_TOTAL - len(raw_keep)
        
        # Initialize engineered features list
        eng = []
        
        # 1. Short Interest Specific Features (consistently high importance)
        
        # Days to cover - key metric for short squeeze potential
        days_to_cover = short_interest / max(avg_volume / 15, 1e-8)
        eng.append(days_to_cover)
        
        # Short interest momentum (change over time)
        if t > 0:
            prev_si = data[t-1, 0]
            si_change = (short_interest - prev_si) / max(prev_si, 1e-8)
            eng.append(si_change)
        else:
            eng.append(0.0)
        
        # Short interest to volume ratio (normalized)
        si_volume_ratio = short_interest / max(avg_volume, 1e-8)
        # Apply log transformation to handle skewness
        si_volume_ratio_log = np.log1p(si_volume_ratio) if si_volume_ratio > 0 else 0
        eng.append(si_volume_ratio_log)
        
        # 2. Price Action Features
        
        # Recent price trend (exponentially weighted)
        if len(close_prices) >= 5:
            weights = np.exp(np.linspace(0, 1, 5))
            weights = weights / np.sum(weights)  # Normalize weights
            weighted_price_trend = np.sum(weights * (close_prices[-5:] / max(close_prices[-5], 1e-8) - 1.0))
            eng.append(weighted_price_trend)
        else:
            eng.append(0.0)
        
        # Normalized price range over last 5 days
        if len(close_prices) >= 5:
            price_range = (np.max(high_prices[-5:]) - np.min(low_prices[-5:])) / max(np.mean(close_prices[-5:]), 1e-8)
            eng.append(price_range)
        else:
            eng.append(0.0)
        
        # 3. Volume-Price Relationship
        
        # Volume trend with exponential weighting
        if t > 0 and t >= 3:
            volumes = data[t-3:t+1, 1]
            weights = np.exp(np.linspace(0, 1, len(volumes)))
            weights = weights / np.sum(weights)
            weighted_volume = np.sum(weights * volumes)
            volume_trend = avg_volume / max(weighted_volume, 1e-8)
            eng.append(volume_trend)
        else:
            eng.append(1.0)
        
        # Price-volume divergence (when price and volume move in opposite directions)
        if len(close_prices) >= 3 and t > 0:
            price_direction = np.sign(close_prices[-1] - close_prices[-3])
            volume_direction = np.sign(avg_volume - data[max(0, t-2), 1])
            # Divergence is when signs are opposite
            divergence = 1.0 if price_direction * volume_direction < 0 else 0.0
            eng.append(divergence)
        else:
            eng.append(0.0)
        
        # 4. Technical Indicators
        
        # Improved RSI implementation with smoothing
        if len(close_prices) >= 14:
            deltas = np.diff(close_prices[-14:])
            gains = np.where(deltas > 0, deltas, 0)
            losses = np.where(deltas < 0, -deltas, 0)
            
            # Use exponential weighting for gains and losses
            weights = np.exp(np.linspace(0, 1, len(gains)))
            weights = weights / np.sum(weights)
            avg_gain = np.sum(weights * gains)
            
            weights = np.exp(np.linspace(0, 1, len(losses)))
            weights = weights / np.sum(weights)
            avg_loss = np.sum(weights * losses)
            
            rs = avg_gain / max(avg_loss, 1e-8)
            rsi = 100 - (100 / (1 + rs))
            
            # RSI extremes are more informative (0-30 and 70-100)
            rsi_signal = 0.0
            if rsi < 30:
                rsi_signal = (30 - rsi) / 30  # Oversold signal (0 to 1)
            elif rsi > 70:
                rsi_signal = (rsi - 70) / 30  # Overbought signal (0 to 1)
            eng.append(rsi_signal)
        else:
            eng.append(0.0)
        
        # MACD histogram (difference between MACD and signal line)
        if len(close_prices) >= 26:
            # EMA implementation for stability
            ema12 = close_prices[-12:].copy()
            ema26 = close_prices[-26:].copy()
            
            # Simple EMA calculation
            alpha12 = 2 / (12 + 1)
            alpha26 = 2 / (26 + 1)
            
            for i in range(1, len(ema12)):
                ema12[i] = alpha12 * close_prices[-12+i] + (1 - alpha12) * ema12[i-1]
            
            for i in range(1, len(ema26)):
                ema26[i] = alpha26 * close_prices[-26+i] + (1 - alpha26) * ema26[i-1]
            
            macd = ema12[-1] - ema26[-1]
            
            # Normalize MACD by price level
            norm_macd = macd / max(close_prices[-1], 1e-8)
            eng.append(norm_macd)
        else:
            eng.append(0.0)
        
        # 5. Price Pattern Features
        
        # Improved momentum oscillator with adaptive lookback
        lookback = min(10, len(close_prices))
        if lookback >= 3:
            # Use rate of change with exponential weighting
            weights = np.exp(np.linspace(0, 1, lookback))
            weights = weights / np.sum(weights)
            
            # Calculate momentum for each period and apply weights
            momentums = []
            for i in range(1, lookback):
                mom = (close_prices[-i] / max(close_prices[-i-1], 1e-8)) - 1.0
                momentums.append(mom)
            
            if momentums:
                weighted_momentum = np.sum(weights[1:] * np.array(momentums))
                # Normalize to typical range
                norm_momentum = np.clip(weighted_momentum / 0.05, -1.0, 1.0)
                eng.append(norm_momentum)
            else:
                eng.append(0.0)
        else:
            eng.append(0.0)
        
        # Candlestick pattern: Hammer/Shooting Star detection
        if len(close_prices) >= 1:
            body_size = abs(open_prices[-1] - close_prices[-1])
            total_range = max(high_prices[-1] - low_prices[-1], 1e-8)
            
            # Lower shadow
            lower_shadow = min(open_prices[-1], close_prices[-1]) - low_prices[-1]
            # Upper shadow
            upper_shadow = high_prices[-1] - max(open_prices[-1], close_prices[-1])
            
            # Hammer: small body, little/no upper shadow, long lower shadow
            hammer_score = 0.0
            if body_size / total_range < 0.3 and lower_shadow / total_range > 0.6:
                hammer_score = lower_shadow / total_range
            
            # Shooting star: small body, little/no lower shadow, long upper shadow
            shooting_star_score = 0.0
            if body_size / total_range < 0.3 and upper_shadow / total_range > 0.6:
                shooting_star_score = upper_shadow / total_range
            
            # Combined reversal pattern score
            reversal_score = max(hammer_score, shooting_star_score)
            eng.append(reversal_score)
        else:
            eng.append(0.0)
        
        # 6. Advanced Short Interest Predictors
        
        # Short interest relative to price volatility
        if len(close_prices) >= 5:
            returns = np.diff(np.log(close_prices[-5:]))
            volatility = np.std(returns) if len(returns) > 0 else 0
            si_vol_ratio = short_interest * volatility / max(avg_volume, 1e-8)
            # Log transform to handle skewness
            si_vol_ratio_log = np.log1p(si_vol_ratio) if si_vol_ratio > 0 else 0
            eng.append(si_vol_ratio_log)
        else:
            eng.append(0.0)
        
        # Short squeeze potential indicator
        if len(close_prices) >= 5:
            # Combine days to cover with recent price momentum
            price_momentum = (close_prices[-1] / max(close_prices[-5], 1e-8)) - 1.0
            # Higher score when both days to cover and recent price momentum are high
            squeeze_potential = days_to_cover * max(0, price_momentum)
            # Log transform to handle skewness
            squeeze_potential_log = np.log1p(squeeze_potential) if squeeze_potential > 0 else 0
            eng.append(squeeze_potential_log)
        else:
            eng.append(0.0)
        
        # 7. Volatility and Mean Reversion Features
        
        # Bollinger Band width (volatility measure)
        if len(close_prices) >= 10:
            sma = np.mean(close_prices[-10:])
            std = np.std(close_prices[-10:])
            bb_width = (2 * std) / max(sma, 1e-8)
            eng.append(bb_width)
        else:
            eng.append(0.0)
        
        # Mean reversion signal (distance from moving average with direction)
        if len(close_prices) >= 10:
            ma10 = np.mean(close_prices[-10:])
            dist_from_ma = (close_prices[-1] / max(ma10, 1e-8)) - 1.0
            
            # Stronger signal when price is far from MA and short-term momentum is reversing
            if len(close_prices) >= 3:
                short_momentum = (close_prices[-1] / max(close_prices[-3], 1e-8)) - 1.0
                # If price is above MA but momentum is negative, or price is below MA but momentum is positive
                if (dist_from_ma > 0 and short_momentum < 0) or (dist_from_ma < 0 and short_momentum > 0):
                    mean_reversion_signal = dist_from_ma * abs(short_momentum) * 2
                else:
                    mean_reversion_signal = dist_from_ma * 0.5
            else:
                mean_reversion_signal = dist_from_ma
            
            # Normalize to typical range
            norm_signal = np.clip(mean_reversion_signal / 0.05, -1.0, 1.0)
            eng.append(norm_signal)
        else:
            eng.append(0.0)
        
        # 8. Gap Analysis
        
        # Overnight gap significance
        if len(close_prices) >= 2 and len(open_prices) >= 1:
            gap = (open_prices[-1] - close_prices[-2]) / max(close_prices[-2], 1e-8)
            # Normalize gap to typical range
            norm_gap = np.clip(gap / 0.02, -1.0, 1.0)
            eng.append(norm_gap)
        else:
            eng.append(0.0)
        
        # 9. Volume Spikes
        
        # Volume spike detection
        if t > 0 and t >= 5:
            prev_volumes = data[t-5:t, 1]
            avg_prev_volume = np.mean(prev_volumes)
            volume_spike = avg_volume / max(avg_prev_volume, 1e-8) - 1.0
            # Normalize to typical range
            norm_volume_spike = np.clip(volume_spike / 0.5, -1.0, 1.0)
            eng.append(norm_volume_spike)
        else:
            eng.append(0.0)
        
        # 10. Short Interest Efficiency
        
        # Short interest efficiency (how much price impact per unit of short interest)
        if t > 0:
            prev_close = close_prices[-2] if len(close_prices) >= 2 else close_prices[-1]
            price_change = (close_prices[-1] / max(prev_close, 1e-8)) - 1.0
            si_efficiency = abs(price_change) / max(short_interest / avg_volume, 1e-8)
            # Log transform to handle skewness
            si_efficiency_log = np.log1p(si_efficiency) if si_efficiency > 0 else 0
            eng.append(si_efficiency_log)
        else:
            eng.append(0.0)
        
        # Ensure we don't exceed MAX_NEW
        eng = eng[:MAX_NEW]
        
        # Combine raw and engineered features
        row = np.array(raw_keep + eng, dtype=np.float32)
        
        # Ensure consistent size
        if row.size < MAX_TOTAL:
            # Pad with zeros if needed
            row = np.pad(row, (0, MAX_TOTAL - row.size), 'constant')
        elif row.size > MAX_TOTAL:
            # Truncate if needed
            row = row[:MAX_TOTAL]
            
        features[t, :] = row
    
    # Handle NaN, inf values
    features = np.nan_to_num(features, nan=0.0, posinf=0.0, neginf=0.0)
    
    return features
```

Performance of this code: MAPE = 6.60%
Improvement over previous: +0.77%
Statistical Analysis: 58/100 features were significant (p < 0.05), 42 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 5):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 6.60%.

### Strategy
- Learn from previous iterations: refine or extend **high-importance** areas, drop or transform **low-importance** ones.
- Learn from previous iterations: keep the features with high feature importance, drop the features with low feature importance.
- Use **financial domain knowledge**.
- Maintain **LSTM-compatible** time series structure.
- Keep the feature set **compact and non-redundant** due to the small sample size.

### HARD IMPLEMENTATION RULES (must follow to avoid index errors and ensure a stable shape)
- Define constants at the top of the function:
  - `RAW_DIM = 62`
  - `MAX_TOTAL = 25`
  - `MAX_NEW = MAX_TOTAL - 1`  # upper bound; actual new count is determined after raw selection, see below
- **Do NOT preallocate** a fixed-width array and write with a moving `idx`.  
  Instead, for each timestep `t`:
  1) Build two Python lists:
     - `raw_keep = []`  (subset of raw features you choose to keep at t, but your selection logic must be **the same for all timesteps** so the final width is constant)
     - `eng = []`       (engineered features you append one by one)
  2) Always include in `raw_keep`: short interest (index 0) and average volume (index 1).
     Prefer **compact OHLC summaries** over copying all 60 OHLC channels (e.g., last-bar O,H,L,C; mean/median close over last 5; normalized range).
  3) After `raw_keep` is formed, compute `MAX_NEW = MAX_TOTAL - len(raw_keep)`.  
     **Never exceed this cap** when appending to `eng`.
  4) For every engineered candidate, **append to `eng`**.  
     If you hit the cap (`len(eng) == MAX_NEW`), **stop adding** more features (no exceptions).
  5) **Never reference** engineered columns by hard-coded indices (e.g., `features[t, 62+7]` is forbidden).  
     If you need a previously computed engineered value, **reuse the local variable** (e.g., `rsi_val`), not a column number.
  6) Ensure the column count is **identical for all timesteps** (no branch-induced width changes).  
     If a feature cannot be computed (e.g., insufficient points), **append a 0 placeholder** for that slot so widths remain equal.
  7) Construct the row with concatenation:
     - `row = np.array(raw_keep + eng, dtype=np.float32)`
     - If `row.size < MAX_TOTAL`, **pad with zeros** to length `MAX_TOTAL`.
     - If `row.size > MAX_TOTAL`, **truncate the tail** to `MAX_TOTAL`.
- After looping over timesteps, stack rows into a 2D array with shape `(lookback_window, MAX_TOTAL)` and return it.
- The function must **never attempt to write past** column index `MAX_TOTAL - 1`.

### Requirements
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 62) and returns a numpy array of shape (lookback_window, constructed_features).
2. The function must:
   - **Preserve the raw features**.
   - Add **new, diverse features** while enforcing **(kept raw + new) ≤ 25**.
   - Avoid near-duplicates: do not include multiple horizons of the same measure unless clearly distinct.
   - Use **eps clamping** for all divisions: `den = max(abs(den), 1e-8)`.
   - Apply `np.nan_to_num(..., nan=0.0, posinf=0.0, neginf=0.0)` before return.
3. Process each timestep independently but maintain the temporal axis (lookback_window).
4. Focus on the **most predictive and stable** features using DL-based importance + domain knowledge.
5. Include **inline comments** explaining how you improved on previous attempts and why each new feature matters.
6. Code must be **production-ready**: numerically safe, vectorized where reasonable, no randomness or printing.
7. DO NOT include imports — these are already available: `np, pd, math, statistics, stats, StandardScaler, MinMaxScaler, mean_squared_error, mean_absolute_error, datetime, time`.
8. Return a **2D numpy array** `(lookback_window, constructed_features)` with dtype `float32`.

### Strong redundancy rules
- **One per family** unless clearly distinct (e.g., choose either SMA ratio or z-score, not both).
- Drop overlapping or affine equivalents (e.g., SMA ratio vs z-score with same window).
- Avoid fragile ops (`np.corrcoef`, polynomial fits, EMA on <3 points); prefer simple, stable ratios.

### Deliverable
Return **ONLY** the Python function code (no text outside the code).
