
You are a financial data scientist specializing in **feature engineering for short-interest prediction** on equity time series.

## Data schema
- Input to your function: a **numpy array** `data` with shape **(lookback_window, 62)** for a *single* sample.
- Feature layout at each timestep `t`:
  - `data[t, 0]` → **short interest** at time *T* (reported every 15 days)
  - `data[t, 1]` → **average daily volume (past 15 days)**
  - `data[t, 2:62]` → **OHLC** over the past 15 days, flattened as **15 days × 4 columns** in order **[O, H, L, C]**  
    Use: `ohlc = data[t, 2:].reshape(15, 4)` → `open, high, low, close = ohlc[:,0], ohlc[:,1], ohlc[:,2], ohlc[:,3]`.

Total: 1 + 1 + 60 = 62 features per timestamp.

## Dataset constraints
- Only ~180 total samples available (very small).
- To reduce overfitting: **keep only the useful raw channels** and add **new features** so that **(kept raw + new) ≤ 25 total columns**.
- You **may drop** raw channels with consistently low importance or redundancy after the second iteration.
- Avoid redundant or near-duplicate engineered features. Prefer a small, diverse set.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 7.37%
  Features: All 62 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_6_t3 (importance=0.0009), Feature_1_t3 (importance=0.0009), Feature_35_t3 (importance=0.0007), Feature_3_t3 (importance=0.0007), Feature_0_t0 (importance=0.0006)

Iteration 1: Iteration 1 - MAPE: 8.67% (Improvement Over Baseline: -1.3%) (Improvement Over Last: -1.3%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_6_t3 (importance=0.0079), Feature_14_t1 (importance=0.0042), Feature_1_t1 (importance=0.0035), Feature_18_t0 (importance=0.0027), Feature_11_t0 (importance=0.0025)

Iteration 2: Iteration 2 - MAPE: 9.52% (Improvement Over Baseline: -2.1%) (Improvement Over Last: -0.8%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_10_t3 (importance=0.0144), Feature_17_t3 (importance=0.0089), Feature_9_t3 (importance=0.0049), Feature_2_t1 (importance=0.0044), Feature_16_t1 (importance=0.0039)

Iteration 3: Iteration 3 - MAPE: 8.22% (Improvement Over Baseline: -0.8%) (Improvement Over Last: +1.3%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_17_t2 (importance=0.0072), Feature_15_t0 (importance=0.0049), Feature_8_t3 (importance=0.0032), Feature_19_t3 (importance=0.0030), Feature_15_t1 (importance=0.0028)

Iteration 4: Iteration 4 - MAPE: 6.60% (Improvement Over Baseline: +0.8%) (Improvement Over Last: +1.6%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_8_t2 (importance=0.0042), Feature_17_t3 (importance=0.0042), Feature_11_t3 (importance=0.0040), Feature_15_t0 (importance=0.0038), Feature_19_t3 (importance=0.0036)

Iteration 5: Iteration 5 - MAPE: 6.89% (Improvement Over Baseline: -0.3%) (Improvement Over Last: -0.3%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_21_t3 (importance=0.0054), Feature_17_t3 (importance=0.0039), Feature_20_t1 (importance=0.0036), Feature_15_t3 (importance=0.0030), Feature_13_t3 (importance=0.0025)

Iteration 6: Iteration 6 - MAPE: 7.64% (Improvement Over Baseline: -1.0%) (Improvement Over Last: -0.7%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_11_t3 (importance=0.0099), Feature_18_t2 (importance=0.0063), Feature_9_t0 (importance=0.0060), Feature_6_t3 (importance=0.0050), Feature_5_t2 (importance=0.0034)









PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 6):

```python
def construct_features(data):
    RAW_DIM = 62
    MAX_TOTAL = 25
    
    lookback_window = data.shape[0]
    features = np.zeros((lookback_window, MAX_TOTAL), dtype=np.float32)
    
    for t in range(lookback_window):
        # Extract raw data for this timestep
        short_interest = data[t, 0]
        avg_volume = data[t, 1]
        ohlc = data[t, 2:].reshape(15, 4)
        open_prices, high_prices, low_prices, close_prices = ohlc[:, 0], ohlc[:, 1], ohlc[:, 2], ohlc[:, 3]
        
        # Keep essential raw features based on importance analysis
        # Keeping only the most important raw features to allow more engineered features
        raw_keep = [
            short_interest,  # Always keep short interest (highest importance)
            avg_volume,      # Always keep average volume (high importance)
            close_prices[-1],  # Most recent close price
        ]
        
        # Calculate MAX_NEW based on raw features kept
        MAX_NEW = MAX_TOTAL - len(raw_keep)
        
        # Initialize engineered features list
        eng = []
        
        # 1. Short Interest Specific Features (consistently high importance)
        
        # Days to cover - key metric for short squeeze potential
        days_to_cover = short_interest / max(avg_volume, 1e-8)
        eng.append(days_to_cover)
        
        # Short interest momentum (change over time) with exponential weighting
        if t > 0:
            prev_si = data[t-1, 0]
            si_change = (short_interest - prev_si) / max(prev_si, 1e-8)
            
            # Add exponential weighting if we have more history
            if t >= 3:
                si_history = [data[max(0, t-i), 0] for i in range(3, 0, -1)]
                weights = np.exp(np.linspace(0, 1, len(si_history)))
                weights = weights / np.sum(weights)
                
                # Calculate weighted momentum
                si_changes = []
                for i in range(1, len(si_history)):
                    change = (si_history[i] - si_history[i-1]) / max(si_history[i-1], 1e-8)
                    si_changes.append(change)
                
                if si_changes:
                    weighted_si_change = np.sum(weights[1:] * np.array(si_changes))
                    si_change = 0.7 * si_change + 0.3 * weighted_si_change  # Blend recent and weighted
            
            eng.append(si_change)
        else:
            eng.append(0.0)
        
        # Short interest to volume ratio with log transformation
        si_volume_ratio = short_interest / max(avg_volume, 1e-8)
        si_volume_ratio_log = np.log1p(si_volume_ratio) if si_volume_ratio > 0 else 0
        eng.append(si_volume_ratio_log)
        
        # 2. Price Action Features
        
        # Recent price trend with adaptive lookback and exponential weighting
        if len(close_prices) >= 5:
            weights = np.exp(np.linspace(0, 1, 5))
            weights = weights / np.sum(weights)
            
            # Calculate returns for each period
            returns = []
            for i in range(1, 5):
                ret = (close_prices[-i] / max(close_prices[-i-1], 1e-8)) - 1.0
                returns.append(ret)
            
            # Apply weights to returns
            weighted_price_trend = np.sum(weights[:-1] * np.array(returns))
            eng.append(weighted_price_trend)
        else:
            eng.append(0.0)
        
        # 3. Volume-Price Relationship
        
        # Volume trend with exponential weighting and normalization
        if t >= 3:
            volumes = [data[max(0, t-i), 1] for i in range(3, -1, -1)]
            weights = np.exp(np.linspace(0, 1, len(volumes)))
            weights = weights / np.sum(weights)
            weighted_volume = np.sum(weights * np.array(volumes))
            
            # Normalize to recent average to detect relative changes
            volume_trend = avg_volume / max(weighted_volume, 1e-8)
            eng.append(volume_trend)
        else:
            eng.append(1.0)
        
        # Price-volume correlation (improved divergence detection)
        if len(close_prices) >= 5 and t >= 4:
            # Get price and volume histories
            price_history = close_prices[-5:]
            volume_history = [data[max(0, t-4+i), 1] for i in range(5)]
            
            # Calculate price and volume changes
            price_changes = np.diff(price_history)
            volume_changes = np.diff(volume_history)
            
            # Calculate correlation if we have enough data
            if len(price_changes) >= 3 and len(volume_changes) >= 3:
                # Use sign correlation for robustness
                price_signs = np.sign(price_changes)
                volume_signs = np.sign(volume_changes)
                
                # Count matching and opposite signs
                matches = np.sum(price_signs * volume_signs)
                correlation = matches / len(price_signs)
                
                # Transform to highlight divergence (-1 to 1 scale)
                eng.append(correlation)
            else:
                eng.append(0.0)
        else:
            eng.append(0.0)
        
        # 4. Technical Indicators
        
        # Improved RSI with adaptive lookback and extremes emphasis
        if len(close_prices) >= 10:
            # Use adaptive lookback based on available data
            lookback = min(14, len(close_prices)-1)
            deltas = np.diff(close_prices[-lookback-1:])
            gains = np.where(deltas > 0, deltas, 0)
            losses = np.where(deltas < 0, -deltas, 0)
            
            # Use exponential weighting for gains and losses
            weights = np.exp(np.linspace(0, 1, len(gains)))
            weights = weights / np.sum(weights)
            avg_gain = np.sum(weights * gains)
            avg_loss = np.sum(weights * losses)
            
            rs = avg_gain / max(avg_loss, 1e-8)
            rsi = 100 - (100 / (1 + rs))
            
            # Transform RSI to emphasize extremes (more predictive for reversals)
            rsi_transformed = 0.0
            if rsi < 30:
                rsi_transformed = -1.0 * (30 - rsi) / 30  # Oversold: -1 to 0
            elif rsi > 70:
                rsi_transformed = (rsi - 70) / 30  # Overbought: 0 to 1
            else:
                # Middle range gets less weight (closer to 0)
                rsi_transformed = (rsi - 50) / 40  # Middle: -0.5 to 0.5
            
            eng.append(rsi_transformed)
        else:
            eng.append(0.0)
        
        # 5. Volatility and Mean Reversion
        
        # Bollinger Band position with volatility adjustment
        if len(close_prices) >= 10:
            sma = np.mean(close_prices[-10:])
            std = np.std(close_prices[-10:])
            
            # Position within Bollinger Bands (-1 to +1 scale)
            bb_position = (close_prices[-1] - sma) / max(2 * std, 1e-8)
            bb_position = np.clip(bb_position, -1.0, 1.0)
            
            # Adjust signal strength based on BB width (volatility)
            bb_width = (2 * std) / max(sma, 1e-8)
            
            # Stronger signal in low volatility environments (tighter bands)
            if bb_width < 0.05:  # Very tight bands
                bb_position *= 1.5
            
            eng.append(bb_position)
        else:
            eng.append(0.0)
        
        # 6. Short Interest Specific Predictors
        
        # Short squeeze potential with volume acceleration
        if len(close_prices) >= 5 and t >= 3:
            # Price momentum
            price_momentum = (close_prices[-1] / max(close_prices[-5], 1e-8)) - 1.0
            
            # Volume acceleration (increasing volume trend)
            volume_history = [data[max(0, t-3+i), 1] for i in range(4)]
            volume_changes = np.diff(volume_history)
            volume_accel = np.mean(volume_changes) / max(volume_history[0], 1e-8)
            
            # Combine days to cover with price momentum and volume acceleration
            # Higher score when days to cover is high, price momentum is positive, and volume is accelerating
            squeeze_potential = days_to_cover * max(0, price_momentum) * max(1, 1 + volume_accel)
            
            # Log transform to handle skewness
            squeeze_potential_log = np.log1p(squeeze_potential) if squeeze_potential > 0 else 0
            eng.append(squeeze_potential_log)
        else:
            eng.append(0.0)
        
        # 7. Advanced Price Patterns
        
        # Candlestick pattern: Reversal pattern detection with volume confirmation
        if len(close_prices) >= 2 and len(open_prices) >= 2:
            # Current and previous candle data
            curr_body = abs(open_prices[-1] - close_prices[-1])
            prev_body = abs(open_prices[-2] - close_prices[-2])
            
            curr_range = max(high_prices[-1] - low_prices[-1], 1e-8)
            prev_range = max(high_prices[-2] - low_prices[-2], 1e-8)
            
            # Current candle shadows
            lower_shadow = min(open_prices[-1], close_prices[-1]) - low_prices[-1]
            upper_shadow = high_prices[-1] - max(open_prices[-1], close_prices[-1])
            
            # Previous candle shadows
            prev_lower = min(open_prices[-2], close_prices[-2]) - low_prices[-2]
            prev_upper = high_prices[-2] - max(open_prices[-2], close_prices[-2])
            
            # Bullish reversal patterns
            bullish_score = 0.0
            
            # Hammer (small body, little/no upper shadow, long lower shadow)
            if curr_body / curr_range < 0.3 and lower_shadow / curr_range > 0.6 and upper_shadow / curr_range < 0.1:
                bullish_score += lower_shadow / curr_range
            
            # Bullish engulfing (current bullish candle engulfs previous bearish candle)
            if close_prices[-1] > open_prices[-1] and close_prices[-2] < open_prices[-2]:
                if close_prices[-1] > open_prices[-2] and open_prices[-1] < close_prices[-2]:
                    bullish_score += 0.5
            
            # Bearish reversal patterns
            bearish_score = 0.0
            
            # Shooting star (small body, little/no lower shadow, long upper shadow)
            if curr_body / curr_range < 0.3 and upper_shadow / curr_range > 0.6 and lower_shadow / curr_range < 0.1:
                bearish_score += upper_shadow / curr_range
            
            # Bearish engulfing (current bearish candle engulfs previous bullish candle)
            if close_prices[-1] < open_prices[-1] and close_prices[-2] > open_prices[-2]:
                if close_prices[-1] < open_prices[-2] and open_prices[-1] > close_prices[-2]:
                    bearish_score += 0.5
            
            # Volume confirmation (higher volume strengthens the signal)
            if t > 0:
                volume_ratio = avg_volume / max(data[t-1, 1], 1e-8)
                if volume_ratio > 1.2:  # Volume increasing
                    bullish_score *= 1.5
                    bearish_score *= 1.5
            
            # Combined reversal pattern score (positive for bullish, negative for bearish)
            reversal_score = bullish_score - bearish_score
            eng.append(reversal_score)
        else:
            eng.append(0.0)
        
        # 8. Short Interest Trend Reversal Signal
        
        # Short interest trend reversal signal
        if t >= 2:
            si_history = [data[max(0, t-2+i), 0] for i in range(3)]
            
            # Calculate first and second derivatives
            si_change = (si_history[1] - si_history[0]) / max(si_history[0], 1e-8)
            si_accel = ((si_history[2] - si_history[1]) / max(si_history[1], 1e-8)) - si_change
            
            # Strong signal when acceleration is opposite to direction (trend reversal)
            if np.sign(si_accel) != np.sign(si_change):
                reversal_strength = abs(si_accel) * 2
                # Direction: positive when SI decreasing, negative when SI increasing
                si_reversal = -np.sign(si_history[2] - si_history[1]) * reversal_strength
            else:
                # Continuation signal (weaker)
                si_reversal = -np.sign(si_history[2] - si_history[1]) * abs(si_accel) * 0.5
            
            eng.append(si_reversal)
        else:
            eng.append(0.0)
        
        # 9. NEW: Short Interest Relative to Historical Range
        if t >= 5:
            # Get short interest history
            si_history = [data[max(0, t-i), 0] for i in range(5, -1, -1)]
            
            # Calculate min, max, and range
            si_min = min(si_history)
            si_max = max(si_history)
            si_range = max(si_max - si_min, 1e-8)
            
            # Position within historical range (0 to 1)
            si_position = (short_interest - si_min) / si_range
            
            # Transform to highlight extremes (-1 to 1 scale)
            # -1: at historical low, 0: at middle of range, 1: at historical high
            si_position_transformed = 2 * si_position - 1
            
            eng.append(si_position_transformed)
        else:
            eng.append(0.0)
        
        # 10. NEW: Short Interest Momentum Divergence
        if t >= 3 and len(close_prices) >= 5:
            # Get short interest history
            si_history = [data[max(0, t-i), 0] for i in range(3, -1, -1)]
            
            # Calculate short interest momentum
            si_momentum = (si_history[-1] - si_history[0]) / max(si_history[0], 1e-8)
            
            # Calculate price momentum
            price_momentum = (close_prices[-1] / max(close_prices[-5], 1e-8)) - 1.0
            
            # Divergence occurs when price and short interest move in opposite directions
            # Stronger signal when both movements are significant
            divergence = -1 * si_momentum * price_momentum
            
            # Amplify signal when divergence is positive (true divergence)
            if divergence > 0:
                divergence *= 2
            
            eng.append(divergence)
        else:
            eng.append(0.0)
        
        # 11. NEW: Short Interest Volatility
        if t >= 5:
            # Get short interest history
            si_history = [data[max(0, t-i), 0] for i in range(5, -1, -1)]
            
            # Calculate short interest returns
            si_returns = []
            for i in range(1, len(si_history)):
                ret = (si_history[i] / max(si_history[i-1], 1e-8)) - 1.0
                si_returns.append(ret)
            
            # Calculate volatility (standard deviation of returns)
            si_volatility = np.std(si_returns) if len(si_returns) > 1 else 0
            
            # Log transform to handle skewness
            si_volatility_log = np.log1p(si_volatility * 10) if si_volatility > 0 else 0
            
            eng.append(si_volatility_log)
        else:
            eng.append(0.0)
        
        # 12. NEW: Short Interest Efficiency Ratio
        if t >= 5:
            # Get short interest history
            si_history = [data[max(0, t-i), 0] for i in range(5, -1, -1)]
            
            # Calculate directional movement
            directional_movement = abs(si_history[-1] - si_history[0])
            
            # Calculate total movement (sum of absolute changes)
            total_movement = 0
            for i in range(1, len(si_history)):
                total_movement += abs(si_history[i] - si_history[i-1])
            
            # Efficiency ratio (0 to 1)
            # Higher values indicate more directional movement (trend)
            # Lower values indicate more choppy movement (range-bound)
            efficiency = directional_movement / max(total_movement, 1e-8)
            
            # Transform to highlight extremes
            # Values close to 0 or 1 are more significant
            if efficiency < 0.5:
                efficiency_transformed = -1 * (0.5 - efficiency) * 2  # -1 to 0
            else:
                efficiency_transformed = (efficiency - 0.5) * 2  # 0 to 1
            
            eng.append(efficiency_transformed)
        else:
            eng.append(0.0)
        
        # 13. NEW: Short Interest to Price Ratio Change
        if t >= 1 and len(close_prices) >= 2:
            # Calculate current ratio
            current_ratio = short_interest / max(close_prices[-1], 1e-8)
            
            # Calculate previous ratio
            prev_si = data[t-1, 0]
            prev_close = close_prices[-2] if len(close_prices) >= 2 else close_prices[-1]
            prev_ratio = prev_si / max(prev_close, 1e-8)
            
            # Calculate ratio change
            ratio_change = (current_ratio / max(prev_ratio, 1e-8)) - 1.0
            
            # Log transform to handle skewness
            ratio_change_transformed = np.sign(ratio_change) * np.log1p(abs(ratio_change) * 10)
            
            eng.append(ratio_change_transformed)
        else:
            eng.append(0.0)
        
        # 14. NEW: Short Interest Acceleration
        if t >= 2:
            # Get short interest history
            si_t = short_interest
            si_t1 = data[t-1, 0]
            si_t2 = data[t-2, 0]
            
            # Calculate first derivatives (velocity)
            velocity_t = (si_t - si_t1) / max(si_t1, 1e-8)
            velocity_t1 = (si_t1 - si_t2) / max(si_t2, 1e-8)
            
            # Calculate second derivative (acceleration)
            acceleration = velocity_t - velocity_t1
            
            # Normalize by average short interest
            avg_si = (si_t + si_t1 + si_t2) / 3
            norm_acceleration = acceleration * avg_si / max(si_t, 1e-8)
            
            # Transform to highlight significant accelerations
            acceleration_transformed = np.sign(norm_acceleration) * np.log1p(abs(norm_acceleration) * 20)
            
            eng.append(acceleration_transformed)
        else:
            eng.append(0.0)
        
        # 15. NEW: Short Interest Seasonality
        # Many stocks show cyclical patterns in short interest reporting
        if t >= 30:  # Need sufficient history to detect patterns
            # Get longer short interest history
            si_history = [data[max(0, t-i), 0] for i in range(30, -1, -1)]
            
            # Calculate average change at this point in the cycle (assuming 15-day reporting)
            cycle_position = t % 15
            cycle_changes = []
            
            for i in range(cycle_position, len(si_history) - 15, 15):
                if i + 15 < len(si_history):
                    change = (si_history[i+15] - si_history[i]) / max(si_history[i], 1e-8)
                    cycle_changes.append(change)
            
            # Calculate average seasonal effect
            seasonal_effect = np.mean(cycle_changes) if cycle_changes else 0
            
            # Transform to highlight significant seasonal patterns
            seasonal_effect_transformed = np.sign(seasonal_effect) * np.log1p(abs(seasonal_effect) * 10)
            
            eng.append(seasonal_effect_transformed)
        else:
            eng.append(0.0)
        
        # 16. NEW: Short Interest Regime Detection
        if t >= 10:
            # Get short interest history
            si_history = [data[max(0, t-i), 0] for i in range(10, -1, -1)]
            
            # Calculate moving averages
            short_ma = np.mean(si_history[-3:])
            long_ma = np.mean(si_history)
            
            # Calculate regime indicator
            # Positive: short-term average > long-term average (increasing trend)
            # Negative: short-term average < long-term average (decreasing trend)
            regime = (short_ma / max(long_ma, 1e-8)) - 1.0
            
            # Transform to highlight regime strength
            regime_transformed = np.sign(regime) * np.log1p(abs(regime) * 10)
            
            eng.append(regime_transformed)
        else:
            eng.append(0.0)
        
        # 17. NEW: Short Interest Relative to Market Capitalization Proxy
        # Using price * volume as a proxy for market cap
        if len(close_prices) >= 1:
            # Calculate market cap proxy
            market_cap_proxy = close_prices[-1] * avg_volume
            
            # Calculate short interest relative to market cap
            si_to_mcap = short_interest / max(market_cap_proxy, 1e-8)
            
            # Log transform to handle skewness
            si_to_mcap_log = np.log1p(si_to_mcap * 1000) if si_to_mcap > 0 else 0
            
            eng.append(si_to_mcap_log)
        else:
            eng.append(0.0)
        
        # 18. NEW: Short Interest Concentration
        if t >= 5:
            # Get short interest history
            si_history = [data[max(0, t-i), 0] for i in range(5, -1, -1)]
            
            # Calculate concentration (kurtosis proxy)
            # Higher values indicate more concentrated changes
            si_changes = []
            for i in range(1, len(si_history)):
                change = (si_history[i] - si_history[i-1]) / max(si_history[i-1], 1e-8)
                si_changes.append(change)
            
            # Calculate variance and fourth moment
            variance = np.var(si_changes) if len(si_changes) > 1 else 0
            
            # Calculate fourth moment (simplified kurtosis proxy)
            fourth_moment = 0
            if len(si_changes) > 1 and variance > 0:
                for change in si_changes:
                    fourth_moment += (change ** 4)
                fourth_moment /= len(si_changes)
                fourth_moment /= (variance ** 2)
                
                # Normalize (normal distribution has kurtosis of 3)
                concentration = fourth_moment - 3
                
                # Transform to highlight extreme values
                concentration_transformed = np.sign(concentration) * np.log1p(abs(concentration))
                eng.append(concentration_transformed)
            else:
                eng.append(0.0)
        else:
            eng.append(0.0)
        
        # 19. NEW: Short Interest Relative to Historical Volatility
        if len(close_prices) >= 10:
            # Calculate price returns
            returns = []
            for i in range(1, 10):
                ret = (close_prices[-i] / max(close_prices[-i-1], 1e-8)) - 1.0
                returns.append(ret)
            
            # Calculate historical volatility
            volatility = np.std(returns) if len(returns) > 1 else 0
            
            # Calculate short interest relative to volatility
            si_to_vol = short_interest * volatility / max(avg_volume, 1e-8)
            
            # Log transform to handle skewness
            si_to_vol_log = np.log1p(si_to_vol * 10) if si_to_vol > 0 else 0
            
            eng.append(si_to_vol_log)
        else:
            eng.append(0.0)
        
        # 20. NEW: Short Interest Relative to Price Momentum
        if len(close_prices) >= 10:
            # Calculate price momentum
            momentum = (close_prices[-1] / max(close_prices[-10], 1e-8)) - 1.0
            
            # Calculate short interest relative to momentum
            # Higher values when short interest is high relative to negative momentum
            # Lower values when short interest is high relative to positive momentum
            si_to_momentum = short_interest * (-1 * momentum) / max(avg_volume, 1e-8)
            
            # Transform to highlight extreme values
            si_to_momentum_transformed = np.sign(si_to_momentum) * np.log1p(abs(si_to_momentum) * 10)
            
            eng.append(si_to_momentum_transformed)
        else:
            eng.append(0.0)
        
        # 21. NEW: Short Interest Relative to Volume Trend
        if t >= 5:
            # Calculate volume trend
            volume_history = [data[max(0, t-i), 1] for i in range(5, -1, -1)]
            volume_trend = (volume_history[-1] / max(volume_history[0], 1e-8)) - 1.0
            
            # Calculate short interest relative to volume trend
            # Higher values when short interest is high and volume is increasing
            si_to_vol_trend = short_interest * max(0, volume_trend) / max(avg_volume, 1e-8)
            
            # Log transform to handle skewness
            si_to_vol_trend_log = np.log1p(si_to_vol_trend * 10) if si_to_vol_trend > 0 else 0
            
            eng.append(si_to_vol_trend_log)
        else:
            eng.append(0.0)
        
        # 22. NEW: Short Interest Relative to Price Range
        if len(close_prices) >= 10:
            # Calculate price range
            price_range = (np.max(high_prices[-10:]) - np.min(low_prices[-10:])) / max(np.mean(close_prices[-10:]), 1e-8)
            
            # Calculate short interest relative to price range
            si_to_range = short_interest * price_range / max(avg_volume, 1e-8)
            
            # Log transform to handle skewness
            si_to_range_log = np.log1p(si_to_range * 10) if si_to_range > 0 else 0
            
            eng.append(si_to_range_log)
        else:
            eng.append(0.0)
        
        # Ensure we don't exceed MAX_NEW
        eng = eng[:MAX_NEW]
        
        # Combine raw and engineered features
        row = np.array(raw_keep + eng, dtype=np.float32)
        
        # Ensure consistent size
        if row.size < MAX_TOTAL:
            # Pad with zeros if needed
            row = np.pad(row, (0, MAX_TOTAL - row.size), 'constant')
        elif row.size > MAX_TOTAL:
            # Truncate if needed
            row = row[:MAX_TOTAL]
            
        features[t, :] = row
    
    # Handle NaN, inf values
    features = np.nan_to_num(features, nan=0.0, posinf=0.0, neginf=0.0)
    
    return features
```

Performance of this code: MAPE = 7.64%
Change from previous: -1.04%
Statistical Analysis: 43/100 features were significant (p < 0.05), 25 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 7):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 6.60%.

### Strategy
- Learn from previous iterations: refine or extend **high-importance** areas, drop or transform **low-importance** ones.
- Learn from previous iterations: keep the features with high feature importance, drop the features with low feature importance.
- Use **financial domain knowledge**.
- Maintain **LSTM-compatible** time series structure.
- Keep the feature set **compact and non-redundant** due to the small sample size.

### HARD IMPLEMENTATION RULES (must follow to avoid index errors and ensure a stable shape)
- Define constants at the top of the function:
  - `RAW_DIM = 62`
  - `MAX_TOTAL = 25`
  - `MAX_NEW = MAX_TOTAL - 1`  # upper bound; actual new count is determined after raw selection, see below
- **Do NOT preallocate** a fixed-width array and write with a moving `idx`.  
  Instead, for each timestep `t`:
  1) Build two Python lists:
     - `raw_keep = []`  (subset of raw features you choose to keep at t, but your selection logic must be **the same for all timesteps** so the final width is constant)
     - `eng = []`       (engineered features you append one by one)
  2) Always include in `raw_keep`: short interest (index 0) and average volume (index 1).
     Prefer **compact OHLC summaries** over copying all 60 OHLC channels (e.g., last-bar O,H,L,C; mean/median close over last 5; normalized range).
  3) After `raw_keep` is formed, compute `MAX_NEW = MAX_TOTAL - len(raw_keep)`.  
     **Never exceed this cap** when appending to `eng`.
  4) For every engineered candidate, **append to `eng`**.  
     If you hit the cap (`len(eng) == MAX_NEW`), **stop adding** more features (no exceptions).
  5) **Never reference** engineered columns by hard-coded indices (e.g., `features[t, 62+7]` is forbidden).  
     If you need a previously computed engineered value, **reuse the local variable** (e.g., `rsi_val`), not a column number.
  6) Ensure the column count is **identical for all timesteps** (no branch-induced width changes).  
     If a feature cannot be computed (e.g., insufficient points), **append a 0 placeholder** for that slot so widths remain equal.
  7) Construct the row with concatenation:
     - `row = np.array(raw_keep + eng, dtype=np.float32)`
     - If `row.size < MAX_TOTAL`, **pad with zeros** to length `MAX_TOTAL`.
     - If `row.size > MAX_TOTAL`, **truncate the tail** to `MAX_TOTAL`.
- After looping over timesteps, stack rows into a 2D array with shape `(lookback_window, MAX_TOTAL)` and return it.
- The function must **never attempt to write past** column index `MAX_TOTAL - 1`.

### Requirements
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 62) and returns a numpy array of shape (lookback_window, constructed_features).
2. The function must:
   - **Preserve the raw features**.
   - Add **new, diverse features** while enforcing **(kept raw + new) ≤ 25**.
   - Avoid near-duplicates: do not include multiple horizons of the same measure unless clearly distinct.
   - Use **eps clamping** for all divisions: `den = max(abs(den), 1e-8)`.
   - Apply `np.nan_to_num(..., nan=0.0, posinf=0.0, neginf=0.0)` before return.
3. Process each timestep independently but maintain the temporal axis (lookback_window).
4. Focus on the **most predictive and stable** features using DL-based importance + domain knowledge.
5. Include **inline comments** explaining how you improved on previous attempts and why each new feature matters.
6. Code must be **production-ready**: numerically safe, vectorized where reasonable, no randomness or printing.
7. DO NOT include imports — these are already available: `np, pd, math, statistics, stats, StandardScaler, MinMaxScaler, mean_squared_error, mean_absolute_error, datetime, time`.
8. Return a **2D numpy array** `(lookback_window, constructed_features)` with dtype `float32`.

### Strong redundancy rules
- **One per family** unless clearly distinct (e.g., choose either SMA ratio or z-score, not both).
- Drop overlapping or affine equivalents (e.g., SMA ratio vs z-score with same window).
- Avoid fragile ops (`np.corrcoef`, polynomial fits, EMA on <3 points); prefer simple, stable ratios.

### Deliverable
Return **ONLY** the Python function code (no text outside the code).
