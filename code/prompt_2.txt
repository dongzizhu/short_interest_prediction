
You are a financial data scientist specializing in **feature engineering for short-interest prediction** on equity time series.

## Data schema
- Input to your function: a **numpy array** `data` with shape **(lookback_window, 62)** for a *single* sample.
- Feature layout at each timestep `t`:
  - `data[t, 0]` → **short interest** at time *T* (reported every 15 days)
  - `data[t, 1]` → **average daily volume (past 15 days)**
  - `data[t, 2:62]` → **OHLC** over the past 15 days, flattened as **15 days × 4 columns** in order **[O, H, L, C]**  
    Use: `ohlc = data[t, 2:].reshape(15, 4)` → `open, high, low, close = ohlc[:,0], ohlc[:,1], ohlc[:,2], ohlc[:,3]`.

Total: 1 + 1 + 60 = 62 features per timestamp.

## Dataset constraints
- Only ~180 total samples available (very small).
- To reduce overfitting: **keep ALL 62 raw features** and add **new features** so that **(raw + new) ≤ 85 total columns**.
- Avoid redundant or near-duplicate engineered features. Prefer a small, diverse set.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 9.77%
  Features: All 62 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_0 (importance=0.0241), Feature_1 (importance=0.0058), Feature_52 (importance=0.0011), Feature_58 (importance=0.0011), Feature_12 (importance=0.0008)

Iteration 1: Iteration 1 - MAPE: 9.09% (Improvement Over Baseline: +0.7%) (Improvement Over Last: +0.7%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_0 (importance=0.0323), Feature_1 (importance=0.0046), Feature_14 (importance=0.0016), Feature_17 (importance=0.0008), Feature_46 (importance=0.0007)









PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 1):

```python
def construct_features(data):
    """
    Construct features for short interest prediction.
    
    Args:
        data: numpy array of shape (lookback_window, 62)
        
    Returns:
        numpy array of shape (lookback_window, MAX_TOTAL)
    """
    RAW_DIM = 62
    MAX_TOTAL = 85
    MAX_NEW = MAX_TOTAL - RAW_DIM
    
    lookback_window = data.shape[0]
    result = []
    
    for t in range(lookback_window):
        # Keep all raw features
        raw_keep = list(data[t])
        
        # Initialize engineered features list
        eng = []
        
        # Extract short interest and volume
        short_interest = data[t, 0]
        avg_volume = data[t, 1]
        
        # Reshape OHLC data
        ohlc = data[t, 2:].reshape(15, 4)
        open_prices, high_prices, low_prices, close_prices = ohlc[:, 0], ohlc[:, 1], ohlc[:, 2], ohlc[:, 3]
        
        # 1. Short Interest to Volume Ratio - key relationship between SI and liquidity
        si_volume_ratio = short_interest / max(avg_volume, 1e-8)
        eng.append(si_volume_ratio)
        
        # 2. Price Volatility (15-day) - volatility is often correlated with short interest
        returns = np.diff(close_prices) / np.maximum(close_prices[:-1], 1e-8)
        volatility = np.std(returns) if len(returns) > 1 else 0
        eng.append(volatility)
        
        # 3. Average True Range (ATR) - measure of volatility that accounts for gaps
        tr_values = []
        for i in range(1, len(close_prices)):
            high_low = high_prices[i] - low_prices[i]
            high_close_prev = abs(high_prices[i] - close_prices[i-1])
            low_close_prev = abs(low_prices[i] - close_prices[i-1])
            tr = max(high_low, high_close_prev, low_close_prev)
            tr_values.append(tr)
        atr = np.mean(tr_values) if tr_values else 0
        eng.append(atr)
        
        # 4. RSI (Relative Strength Index) - momentum indicator
        delta = np.diff(close_prices)
        gain = np.sum(delta[delta > 0]) if len(delta[delta > 0]) > 0 else 0
        loss = np.sum(-delta[delta < 0]) if len(delta[delta < 0]) > 0 else 0
        
        avg_gain = gain / max(len(delta), 1e-8)
        avg_loss = loss / max(len(delta), 1e-8)
        
        rs = avg_gain / max(avg_loss, 1e-8)
        rsi = 100 - (100 / (1 + rs))
        eng.append(rsi)
        
        # 5. Price Trend (linear regression slope) - trend direction can influence short interest
        if len(close_prices) > 1:
            x = np.arange(len(close_prices))
            slope = np.polyfit(x, close_prices, 1)[0]
        else:
            slope = 0
        eng.append(slope)
        
        # 6. Price to Moving Average Ratio - price relative to trend
        sma_5 = np.mean(close_prices[-5:]) if len(close_prices) >= 5 else np.mean(close_prices)
        price_to_sma = close_prices[-1] / max(sma_5, 1e-8)
        eng.append(price_to_sma)
        
        # 7. High-Low Range Ratio - measure of intraday volatility
        avg_hl_range = np.mean(high_prices - low_prices) if len(high_prices) > 0 else 0
        avg_price = np.mean(close_prices) if len(close_prices) > 0 else 0
        hl_range_ratio = avg_hl_range / max(avg_price, 1e-8)
        eng.append(hl_range_ratio)
        
        # 8. Volume Trend - volume changes can signal short interest changes
        if len(close_prices) > 5:
            volume_trend = (avg_volume - np.mean(close_prices[-5:] * avg_volume / close_prices[-1])) / max(avg_volume, 1e-8)
        else:
            volume_trend = 0
        eng.append(volume_trend)
        
        # 9. Bollinger Band Width - volatility measure
        if len(close_prices) > 1:
            sma_15 = np.mean(close_prices)
            std_15 = np.std(close_prices)
            bb_width = (2 * std_15) / max(sma_15, 1e-8)
        else:
            bb_width = 0
        eng.append(bb_width)
        
        # 10. MACD Line - momentum indicator
        if len(close_prices) >= 12:
            ema_12 = np.mean(close_prices[-12:])  # Simplified EMA
            ema_26 = np.mean(close_prices)  # Use all available as longer EMA
            macd_line = ema_12 - ema_26
        else:
            macd_line = 0
        eng.append(macd_line)
        
        # 11. Price Gap Ratio - large gaps can indicate short interest changes
        gaps = []
        for i in range(1, len(open_prices)):
            gap = abs(open_prices[i] - close_prices[i-1]) / max(close_prices[i-1], 1e-8)
            gaps.append(gap)
        avg_gap = np.mean(gaps) if gaps else 0
        eng.append(avg_gap)
        
        # 12. Directional Movement Index (DMI) - trend strength indicator
        plus_dm = []
        minus_dm = []
        for i in range(1, len(high_prices)):
            up_move = high_prices[i] - high_prices[i-1]
            down_move = low_prices[i-1] - low_prices[i]
            
            if up_move > down_move and up_move > 0:
                plus_dm.append(up_move)
            else:
                plus_dm.append(0)
                
            if down_move > up_move and down_move > 0:
                minus_dm.append(down_move)
            else:
                minus_dm.append(0)
        
        plus_di = np.sum(plus_dm) / max(atr * len(plus_dm), 1e-8) if plus_dm else 0
        minus_di = np.sum(minus_dm) / max(atr * len(minus_dm), 1e-8) if minus_dm else 0
        
        dx = 100 * abs(plus_di - minus_di) / max(abs(plus_di + minus_di), 1e-8)
        eng.append(dx)
        
        # 13. Close Location Value - where close price is relative to the day's range
        clv_values = []
        for i in range(len(close_prices)):
            if high_prices[i] == low_prices[i]:
                clv_values.append(0)
            else:
                clv = ((close_prices[i] - low_prices[i]) - (high_prices[i] - close_prices[i])) / max(high_prices[i] - low_prices[i], 1e-8)
                clv_values.append(clv)
        avg_clv = np.mean(clv_values) if clv_values else 0
        eng.append(avg_clv)
        
        # 14. Normalized Short Interest - relative to historical levels
        normalized_si = short_interest / max(np.mean(data[:t+1, 0]) if t > 0 else short_interest, 1e-8)
        eng.append(normalized_si)
        
        # 15. Price Momentum - rate of price change
        momentum = (close_prices[-1] / max(close_prices[0], 1e-8) - 1) if len(close_prices) > 1 else 0
        eng.append(momentum)
        
        # 16. Volume-Adjusted Price Change - price moves weighted by volume
        vol_adj_price_change = momentum * avg_volume
        eng.append(vol_adj_price_change)
        
        # 17. Short Interest Change Rate - if we have previous data
        si_change = 0
        if t > 0:
            prev_si = data[t-1, 0]
            si_change = (short_interest - prev_si) / max(prev_si, 1e-8)
        eng.append(si_change)
        
        # 18. Volatility Ratio - recent vs overall volatility
        recent_vol = np.std(returns[-5:]) if len(returns) >= 5 else volatility
        vol_ratio = recent_vol / max(volatility, 1e-8) if volatility > 0 else 1
        eng.append(vol_ratio)
        
        # 19. Chaikin Money Flow - volume-weighted accumulation/distribution
        cmf_values = []
        for i in range(len(close_prices)):
            if high_prices[i] == low_prices[i]:
                mf_multiplier = 0
            else:
                mf_multiplier = ((close_prices[i] - low_prices[i]) - (high_prices[i] - close_prices[i])) / (high_prices[i] - low_prices[i])
            money_flow_volume = mf_multiplier * avg_volume
            cmf_values.append(money_flow_volume)
        cmf = np.sum(cmf_values) / max(avg_volume * len(cmf_values), 1e-8) if cmf_values else 0
        eng.append(cmf)
        
        # 20. Price Range Expansion - widening ranges can indicate volatility
        if len(high_prices) > 5:
            recent_range = np.mean(high_prices[-5:] - low_prices[-5:])
            earlier_range = np.mean(high_prices[:-5] - low_prices[:-5]) if len(high_prices) > 10 else recent_range
            range_expansion = recent_range / max(earlier_range, 1e-8)
        else:
            range_expansion = 1
        eng.append(range_expansion)
        
        # 21. Short Interest to Free Float Ratio (approximated by volume)
        si_float_ratio = short_interest / max(avg_volume * 15, 1e-8)  # 15 days of volume as proxy for float
        eng.append(si_float_ratio)
        
        # 22. Days to Cover - how many days of average volume to cover short positions
        days_to_cover = short_interest / max(avg_volume, 1e-8)
        eng.append(days_to_cover)
        
        # 23. Hurst Exponent (simplified) - measure of trend vs mean reversion
        if len(close_prices) > 5:
            # Calculate log returns
            log_returns = np.diff(np.log(np.maximum(close_prices, 1e-8)))
            if len(log_returns) > 1:
                # Calculate variance ratio as simplified Hurst
                var_full = np.var(log_returns)
                var_half = np.var(log_returns[:len(log_returns)//2]) + np.var(log_returns[len(log_returns)//2:])
                hurst_approx = np.log(var_full / max(var_half/2, 1e-8)) / np.log(2) if var_half > 0 else 0.5
            else:
                hurst_approx = 0.5
        else:
            hurst_approx = 0.5
        eng.append(hurst_approx)
        
        # Ensure we don't exceed MAX_NEW features
        if len(eng) > MAX_NEW:
            eng = eng[:MAX_NEW]
        
        # Combine raw and engineered features
        row = np.array(raw_keep + eng, dtype=np.float32)
        
        # Pad or truncate to MAX_TOTAL
        if row.size < MAX_TOTAL:
            row = np.pad(row, (0, MAX_TOTAL - row.size), 'constant')
        elif row.size > MAX_TOTAL:
            row = row[:MAX_TOTAL]
        
        result.append(row)
    
    # Stack all rows and handle NaN values
    result_array = np.stack(result)
    result_array = np.nan_to_num(result_array, nan=0.0, posinf=0.0, neginf=0.0)
    
    return result_array
```

Performance of this code: MAPE = 9.09%
Improvement over previous: +0.68%
Statistical Analysis: 2/62 features were significant (p < 0.05), 1 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 2):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 9.09%.

### Strategy
- Learn from previous iterations: refine or extend **high-importance** areas, but keep all raw channels this time.
- Use **financial domain knowledge** for engineered features.
- Maintain **LSTM-compatible** time series structure.
- Keep the feature set **compact and non-redundant** due to the small sample size.

### HARD IMPLEMENTATION RULES (must follow to avoid index errors and ensure a stable shape)
- Define constants at the top of the function:
  - `RAW_DIM = 62`
  - `MAX_TOTAL = 85`
  - `MAX_NEW = MAX_TOTAL - RAW_DIM`
- **Do NOT preallocate** a fixed-width array and write with a moving `idx`.  
  Instead, for each timestep `t`:
  1) Start with `raw_keep = list(data[t])` (this includes **all 62 raw features**).
  2) Build `eng = []` for engineered features.
  3) After `raw_keep` is formed, compute `MAX_NEW = MAX_TOTAL - len(raw_keep)`.  
     **Never exceed this cap** when appending to `eng`.
  4) For every engineered candidate, **append to `eng`**.  
     If you hit the cap (`len(eng) == MAX_NEW`), **stop adding** more features (no exceptions).
  5) **Never reference** engineered columns by hard-coded indices (e.g., `features[t, 62+7]` is forbidden).  
     If you need a previously computed engineered value, **reuse the local variable** (e.g., `rsi_val`), not a column number.
  6) Ensure the column count is **identical for all timesteps** (no branch-induced width changes).  
     If a feature cannot be computed (e.g., insufficient points), **append a 0 placeholder** for that slot so widths remain equal.
  7) Construct the row with concatenation:
     - `row = np.array(raw_keep + eng, dtype=np.float32)`
     - If `row.size < MAX_TOTAL`, **pad with zeros** to length `MAX_TOTAL`.
     - If `row.size > MAX_TOTAL`, **truncate the tail** to `MAX_TOTAL`.
- After looping over timesteps, stack rows into a 2D array with shape `(lookback_window, MAX_TOTAL)` and return it.
- The function must **never attempt to write past** column index `MAX_TOTAL - 1`.

### Requirements
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 62) and returns a numpy array of shape (lookback_window, constructed_features).
2. The function must:
   - **Preserve all 62 raw features**.
   - Add **new, diverse features** while enforcing **(raw + new) ≤ 85**.
   - Avoid near-duplicates: do not include multiple horizons of the same measure unless clearly distinct.
   - Use **eps clamping** for all divisions: `den = max(abs(den), 1e-8)`.
   - Apply `np.nan_to_num(..., nan=0.0, posinf=0.0, neginf=0.0)` before return.
3. Process each timestep independently but maintain the temporal axis (lookback_window).
4. Focus on the **most predictive and stable** features using DL-based importance + domain knowledge.
5. Include **inline comments** explaining how you improved on previous attempts and why each new feature matters.
6. Code must be **production-ready**: numerically safe, vectorized where reasonable, no randomness or printing.
7. DO NOT include imports — these are already available: `np, pd, math, statistics, stats, StandardScaler, MinMaxScaler, mean_squared_error, mean_absolute_error, datetime, time`.
8. Return a **2D numpy array** `(lookback_window, constructed_features)` with dtype `float32`.

### Strong redundancy rules
- **One per family** unless clearly distinct (e.g., choose either SMA ratio or z-score, not both).
- Drop overlapping or affine equivalents (e.g., SMA ratio vs z-score with same window).
- Avoid fragile ops (`np.corrcoef`, polynomial fits, EMA on <3 points); prefer simple, stable ratios.

### Deliverable
Return **ONLY** the Python function code (no text outside the code).
