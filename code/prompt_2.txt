
You are a financial data scientist specializing in **feature engineering for short-interest prediction** on equity time series.

## Data schema
- Input to your function: a **numpy array** `data` with shape **(lookback_window, 62)** for a *single* sample.
- Feature layout at each timestep `t`:
  - `data[t, 0]` → **short interest** at time *T* (reported every 15 days)
  - `data[t, 1]` → **average daily volume (past 15 days)**
  - `data[t, 2:62]` → **OHLC** over the past 15 days, flattened as **15 days × 4 columns** in order **[O, H, L, C]**  
    Use: `ohlc = data[t, 2:].reshape(15, 4)` → `open, high, low, close = ohlc[:,0], ohlc[:,1], ohlc[:,2], ohlc[:,3]`.

Total: 1 + 1 + 60 = 62 features per timestamp.

## Dataset constraints
- Only ~180 total samples available (very small).
- To reduce overfitting: **keep only the useful raw channels** and add **new features** so that **(kept raw + new) ≤ 85 total columns**.
- You **may drop** raw channels with consistently low importance or redundancy.
- Avoid redundant or near-duplicate engineered features. Prefer a small, diverse set.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 8.33%
  Features: All 62 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_0 (importance=0.0005), Feature_1 (importance=0.0003), Feature_54 (importance=0.0002), Feature_31 (importance=0.0001), Feature_53 (importance=0.0001)

Iteration 1: Iteration 1 - MAPE: 10.23% (Improvement Over Baseline: -1.9%) (Improvement Over Last: -1.9%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_23 (importance=0.0039), Feature_13 (importance=0.0028), Feature_24 (importance=0.0012), Feature_8 (importance=0.0011), Feature_5 (importance=0.0009)









PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 1):

```python
def construct_features(data):
    RAW_DIM = 62
    MAX_TOTAL = 80
    
    lookback_window = data.shape[0]
    result = []
    
    for t in range(lookback_window):
        # Initialize lists for raw features to keep and engineered features
        raw_keep = []
        eng = []
        
        # Always keep short interest and average volume
        short_interest = data[t, 0]
        avg_volume = data[t, 1]
        raw_keep.extend([short_interest, avg_volume])
        
        # Reshape OHLC data for easier access
        ohlc = data[t, 2:].reshape(15, 4)
        open_prices, high_prices, low_prices, close_prices = ohlc[:, 0], ohlc[:, 1], ohlc[:, 2], ohlc[:, 3]
        
        # Keep only the most recent OHLC values (last day)
        raw_keep.extend([open_prices[-1], high_prices[-1], low_prices[-1], close_prices[-1]])
        
        # Calculate MAX_NEW based on raw features kept
        MAX_NEW = MAX_TOTAL - len(raw_keep)
        
        # Price-based features
        
        # 1. Recent price changes (returns)
        if len(close_prices) > 1:
            daily_returns = np.diff(close_prices) / np.maximum(close_prices[:-1], 1e-8)
            # 1-day return
            eng.append(daily_returns[-1])
            # 3-day return
            eng.append(np.sum(daily_returns[-3:]) if len(daily_returns) >= 3 else 0)
            # 5-day return
            eng.append(np.sum(daily_returns[-5:]) if len(daily_returns) >= 5 else 0)
            # 15-day return
            eng.append(np.sum(daily_returns) if len(daily_returns) >= 1 else 0)
        else:
            eng.extend([0, 0, 0, 0])  # Placeholders if not enough data
        
        # 2. Volatility measures
        if len(close_prices) > 1:
            # Daily volatility (std of returns)
            eng.append(np.std(daily_returns) if len(daily_returns) > 1 else 0)
            # Normalized range
            high_low_range = np.mean((high_prices - low_prices) / np.maximum(close_prices, 1e-8))
            eng.append(high_low_range)
        else:
            eng.extend([0, 0])  # Placeholders
        
        # 3. Moving averages and crossovers
        if len(close_prices) >= 5:
            sma5 = np.mean(close_prices[-5:])
            eng.append(sma5)
            # Price to SMA5 ratio
            eng.append(close_prices[-1] / max(sma5, 1e-8))
        else:
            eng.extend([0, 0])  # Placeholders
            
        if len(close_prices) >= 10:
            sma10 = np.mean(close_prices[-10:])
            eng.append(sma10)
            # SMA5 to SMA10 ratio (momentum indicator)
            sma5 = np.mean(close_prices[-5:])
            eng.append(sma5 / max(sma10, 1e-8))
        else:
            eng.extend([0, 0])  # Placeholders
        
        # 4. RSI (Relative Strength Index)
        if len(daily_returns) >= 14:
            gains = np.maximum(daily_returns, 0)
            losses = np.maximum(-daily_returns, 0)
            avg_gain = np.mean(gains[-14:])
            avg_loss = np.mean(losses[-14:])
            rs = avg_gain / max(avg_loss, 1e-8)
            rsi = 100 - (100 / (1 + rs))
            eng.append(rsi)
        else:
            eng.append(50)  # Default RSI value
        
        # 5. Volume-based features
        # Volume to price ratio
        eng.append(avg_volume / max(close_prices[-1], 1e-8))
        
        # Short interest to volume ratio
        eng.append(short_interest / max(avg_volume, 1e-8))
        
        # 6. Price patterns
        if len(close_prices) >= 3:
            # Candlestick body size (normalized)
            body_sizes = np.abs(close_prices - open_prices) / np.maximum(open_prices, 1e-8)
            eng.append(np.mean(body_sizes[-3:]))
            
            # Upper shadow size (normalized)
            upper_shadows = (high_prices - np.maximum(open_prices, close_prices)) / np.maximum(open_prices, 1e-8)
            eng.append(np.mean(upper_shadows[-3:]))
            
            # Lower shadow size (normalized)
            lower_shadows = (np.minimum(open_prices, close_prices) - low_prices) / np.maximum(open_prices, 1e-8)
            eng.append(np.mean(lower_shadows[-3:]))
        else:
            eng.extend([0, 0, 0])  # Placeholders
        
        # 7. Trend strength indicators
        if len(close_prices) >= 10:
            # ADX-like trend strength (simplified)
            dx_values = []
            for i in range(1, min(10, len(close_prices))):
                plus_dm = max(0, high_prices[i] - high_prices[i-1])
                minus_dm = max(0, low_prices[i-1] - low_prices[i])
                tr = max(high_prices[i] - low_prices[i], 
                         abs(high_prices[i] - close_prices[i-1]),
                         abs(low_prices[i] - close_prices[i-1]))
                plus_di = plus_dm / max(tr, 1e-8)
                minus_di = minus_dm / max(tr, 1e-8)
                dx = 100 * abs(plus_di - minus_di) / max(plus_di + minus_di, 1e-8)
                dx_values.append(dx)
            eng.append(np.mean(dx_values) if dx_values else 0)
        else:
            eng.append(0)  # Placeholder
        
        # 8. Gap analysis
        if len(close_prices) >= 2:
            # Overnight gaps
            gaps = open_prices[1:] - close_prices[:-1]
            normalized_gaps = gaps / np.maximum(close_prices[:-1], 1e-8)
            eng.append(np.mean(normalized_gaps) if len(normalized_gaps) > 0 else 0)
        else:
            eng.append(0)  # Placeholder
        
        # 9. Price acceleration
        if len(daily_returns) >= 3:
            # Second derivative of price (acceleration)
            acceleration = np.diff(daily_returns)
            eng.append(np.mean(acceleration[-2:]) if len(acceleration) >= 2 else 0)
        else:
            eng.append(0)  # Placeholder
        
        # 10. Short interest momentum
        if t > 0:
            prev_short_interest = data[t-1, 0]
            short_interest_change = (short_interest - prev_short_interest) / max(prev_short_interest, 1e-8)
            eng.append(short_interest_change)
        else:
            eng.append(0)  # Placeholder
        
        # Ensure we don't exceed MAX_NEW features
        if len(eng) > MAX_NEW:
            eng = eng[:MAX_NEW]
        
        # Combine raw and engineered features
        row = np.array(raw_keep + eng, dtype=np.float32)
        
        # Pad or truncate to MAX_TOTAL
        if row.size < MAX_TOTAL:
            row = np.pad(row, (0, MAX_TOTAL - row.size), 'constant')
        elif row.size > MAX_TOTAL:
            row = row[:MAX_TOTAL]
        
        result.append(row)
    
    # Stack all rows and handle NaN values
    result_array = np.stack(result)
    result_array = np.nan_to_num(result_array, nan=0.0, posinf=0.0, neginf=0.0)
    
    return result_array
```

Performance of this code: MAPE = 10.23%
Change from previous: -1.90%
Statistical Analysis: 18/80 features were significant (p < 0.05), 13 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 2):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 8.33%.

### Strategy
- Learn from previous iterations: refine or extend **high-importance** areas, drop or transform **low-importance** ones.
- Learn from previous iterations: keep the features with high feature importance, drop the features with low feature importance.
- Use **financial domain knowledge**.
- Maintain **LSTM-compatible** time series structure.
- Keep the feature set **compact and non-redundant** due to the small sample size.

### HARD IMPLEMENTATION RULES (must follow to avoid index errors and ensure a stable shape)
- Define constants at the top of the function:
  - `RAW_DIM = 62`
  - `MAX_TOTAL = 80`
  - `MAX_NEW = MAX_TOTAL - 1`  # upper bound; actual new count is determined after raw selection, see below
- **Do NOT preallocate** a fixed-width array and write with a moving `idx`.  
  Instead, for each timestep `t`:
  1) Build two Python lists:
     - `raw_keep = []`  (subset of raw features you choose to keep at t, but your selection logic must be **the same for all timesteps** so the final width is constant)
     - `eng = []`       (engineered features you append one by one)
  2) Always include in `raw_keep`: short interest (index 0) and average volume (index 1).
     Prefer **compact OHLC summaries** over copying all 60 OHLC channels (e.g., last-bar O,H,L,C; mean/median close over last 5; normalized range).
  3) After `raw_keep` is formed, compute `MAX_NEW = MAX_TOTAL - len(raw_keep)`.  
     **Never exceed this cap** when appending to `eng`.
  4) For every engineered candidate, **append to `eng`**.  
     If you hit the cap (`len(eng) == MAX_NEW`), **stop adding** more features (no exceptions).
  5) **Never reference** engineered columns by hard-coded indices (e.g., `features[t, 62+7]` is forbidden).  
     If you need a previously computed engineered value, **reuse the local variable** (e.g., `rsi_val`), not a column number.
  6) Ensure the column count is **identical for all timesteps** (no branch-induced width changes).  
     If a feature cannot be computed (e.g., insufficient points), **append a 0 placeholder** for that slot so widths remain equal.
  7) Construct the row with concatenation:
     - `row = np.array(raw_keep + eng, dtype=np.float32)`
     - If `row.size < MAX_TOTAL`, **pad with zeros** to length `MAX_TOTAL`.
     - If `row.size > MAX_TOTAL`, **truncate the tail** to `MAX_TOTAL`.
- After looping over timesteps, stack rows into a 2D array with shape `(lookback_window, MAX_TOTAL)` and return it.
- The function must **never attempt to write past** column index `MAX_TOTAL - 1`.

### Requirements
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 62) and returns a numpy array of shape (lookback_window, constructed_features).
2. The function must:
   - **Select and preserve only the useful raw features** (you may drop low-importance raw channels).
   - Add **new, diverse features** while enforcing **(kept raw + new) ≤ 80**.
   - Avoid near-duplicates: do not include multiple horizons of the same measure unless clearly distinct.
   - Use **eps clamping** for all divisions: `den = max(abs(den), 1e-8)`.
   - Apply `np.nan_to_num(..., nan=0.0, posinf=0.0, neginf=0.0)` before return.
3. Process each timestep independently but maintain the temporal axis (lookback_window).
4. Focus on the **most predictive and stable** features using DL-based importance + domain knowledge.
5. Include **inline comments** explaining how you improved on previous attempts and why each new feature matters.
6. Code must be **production-ready**: numerically safe, vectorized where reasonable, no randomness or printing.
7. DO NOT include imports — these are already available: `np, pd, math, statistics, stats, StandardScaler, MinMaxScaler, mean_squared_error, mean_absolute_error, datetime, time`.
8. Return a **2D numpy array** `(lookback_window, constructed_features)` with dtype `float32`.

### Strong redundancy rules
- **One per family** unless clearly distinct (e.g., choose either SMA ratio or z-score, not both).
- Drop overlapping or affine equivalents (e.g., SMA ratio vs z-score with same window).
- Avoid fragile ops (`np.corrcoef`, polynomial fits, EMA on <3 points); prefer simple, stable ratios.

### Deliverable
Return **ONLY** the Python function code (no text outside the code).
