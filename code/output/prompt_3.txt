
You are a financial data scientist specializing in **feature engineering for short-interest prediction** on equity time series.

## Data schema
- Input to your function: a **numpy array** `data` with shape **(lookback_window, 97)** for a *single* sample.
- Feature layout at each timestep `t`:
  - `data[t, 0]` → **short interest** at time *T* (reported every 15 days)
  - `data[t, 1]` → **average daily volume (past 15 days)**
  - `data[t, 2]` → **days to cover** The number of days it would take to cover all short positions based on average daily trading volume.
  - `data[t, 3:63]` → **OHLC** over the past 15 days, flattened as **15 days × 4 columns** in order **[O, H, L, C]**  
    Use: `ohlc = data[t, 3:].reshape(15, 4)` → `open, high, low, close = ohlc[:,0], ohlc[:,1], ohlc[:,2], ohlc[:,3]`.
  - `data[t, 63]` → **options_put_call_volume_ratio** The ratio of the volume of put options to call options traded on that day.
  - `data[t, 64]` → **options_synthetic_short_cost** The cost associated with creating a synthetic short position using options.
  - `data[t, 65]` → **options_avg_implied_volatility** The average implied volatility of options, reflecting market expectations of future stock price volatility.
  - `data[t, 66]` → **shares_outstanding** The total number of shares of a company that are currently owned by all its shareholders, including restricted shares owned by company insiders and institutional investors.
  - `data[t, 67:82]` → Daily short interest volume for the stock over the past 15 days, flattened as **15 days × 1 columns**. Represents the total number of shares that were sold short on each day.
  - `data[t, 82:97]` → Daily total trading volume for the stock over the past 15 days, flattened as **15 days × 1 columns**.  Represents the total number of shares traded (buy + sell) on that trading day.

Total: 3 + 60 + 4 + 30 = 97 features(dimensions) per timestamp.

## Dataset constraints
- Only ~180 total samples available (very small).
- To reduce overfitting: **keep only the useful raw channels** and add **new features** so that **(kept raw + new) ≤ 25 total columns**.
- You **may drop** raw channels with consistently low importance or redundancy after the second iteration.
- Avoid redundant or near-duplicate engineered features. Prefer a small, diverse set.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 10.54%
  Features: All 97 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_69_t3 (importance=0.0018), Feature_71_t3 (importance=0.0017), Feature_70_t3 (importance=0.0015), Feature_72_t3 (importance=0.0014), Feature_74_t3 (importance=0.0008)

Iteration 2: Iteration 2 - MAPE: 8.94% (Improvement Over Previous Best: +1.0%) (Improvement Over Last Iteration: +1.0%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_1_t3 (importance=0.0040), Feature_3_t0 (importance=0.0023), Feature_6_t1 (importance=0.0020), Feature_8_t2 (importance=0.0017), Feature_6_t3 (importance=0.0015)







PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 2):

```python
def construct_features(data):
    RAW_DIM = 97
    MAX_TOTAL = 25
    
    lookback_window = data.shape[0]
    features = np.zeros((lookback_window, MAX_TOTAL), dtype=np.float32)
    
    for t in range(lookback_window):
        # Start with essential raw features to keep
        # Based on feature importance analysis, we're keeping the most important raw features
        # and dropping those with low importance
        raw_keep = [
            data[t, 0],  # short interest - critical target-related feature
            data[t, 1],  # average daily volume - high importance in previous iteration
            data[t, 2],  # days to cover - key short interest metric
            data[t, 63], # options_put_call_volume_ratio - options sentiment indicator
            data[t, 64], # options_synthetic_short_cost - cost of shorting
            data[t, 65], # options_avg_implied_volatility - market's volatility expectation
        ]
        
        # Extract OHLC data for the past 15 days
        ohlc = data[t, 3:63].reshape(15, 4)
        open_prices, high_prices, low_prices, close_prices = ohlc[:, 0], ohlc[:, 1], ohlc[:, 2], ohlc[:, 3]
        
        # Extract short interest volume and total trading volume
        short_volume = data[t, 67:82]
        total_volume = data[t, 82:97]
        
        # Calculate MAX_NEW based on raw features kept
        MAX_NEW = MAX_TOTAL - len(raw_keep)
        
        # Initialize engineered features list
        eng = []
        
        # 1. Short interest to float ratio - key metric for short squeeze potential
        si_float_ratio = data[t, 0] / max(data[t, 66], 1e-8)  # shares_outstanding is at index 66
        eng.append(si_float_ratio)
        
        # 2. Short interest to average daily volume ratio - improved version of days to cover
        si_adv_ratio = data[t, 0] / max(data[t, 1], 1e-8)
        eng.append(si_adv_ratio)
        
        # 3. Short volume ratio (average of last 5 days) - recent shorting intensity
        short_ratio = np.mean(short_volume[-5:] / np.maximum(total_volume[-5:], 1e-8))
        eng.append(short_ratio)
        
        # 4. Short volume trend (last 5 days vs previous 5 days) - acceleration in shorting
        if len(short_volume) >= 10:
            recent_short_avg = np.mean(short_volume[-5:])
            prev_short_avg = np.mean(short_volume[-10:-5])
            denom = max(abs(prev_short_avg), 1e-8)
            short_trend = (recent_short_avg / denom) - 1
        else:
            short_trend = 0
        eng.append(short_trend)
        
        # 5. Short interest growth rate - rate of change in reported short interest
        if t > 0:
            prev_si = data[t-1, 0]
            denom = max(abs(prev_si), 1e-8)
            si_growth = (data[t, 0] / denom) - 1
        else:
            si_growth = 0
        eng.append(si_growth)
        
        # 6. Volatility (standard deviation of returns over past 10 days)
        if len(close_prices) >= 11:
            returns = np.diff(close_prices[-11:]) / np.maximum(close_prices[-11:-1], 1e-8)
            volatility = np.std(returns) if len(returns) > 1 else 0
        else:
            volatility = 0
        eng.append(volatility)
        
        # 7. Options implied volatility to historical volatility ratio - market vs realized volatility
        iv_hv_ratio = data[t, 65] / max(volatility, 1e-8)
        eng.append(iv_hv_ratio)
        
        # 8. Short cost to implied volatility ratio - cost efficiency of shorting
        cost_vol_ratio = data[t, 64] / max(data[t, 65], 1e-8)
        eng.append(cost_vol_ratio)
        
        # 9. RSI (14-day) - oversold/overbought indicator
        if len(close_prices) >= 15:
            delta = np.diff(close_prices)
            gain = np.where(delta > 0, delta, 0)
            loss = np.where(delta < 0, -delta, 0)
            avg_gain = np.mean(gain)
            avg_loss = np.mean(loss)
            denom = max(avg_loss, 1e-8)
            rs = avg_gain / denom
            rsi = 100 - (100 / (1 + rs))
        else:
            rsi = 50  # Default neutral value
        eng.append(rsi)
        
        # 10. Bollinger Band Width - volatility measure
        if len(close_prices) >= 10:
            sma = np.mean(close_prices[-10:])
            std = np.std(close_prices[-10:])
            bb_width = (2 * std) / max(sma, 1e-8)  # Normalized by price level
        else:
            bb_width = 0
        eng.append(bb_width)
        
        # 11. VWAP ratio - price relative to volume-weighted average price
        if len(close_prices) >= 5 and len(total_volume) >= 5:
            vwap = np.sum(close_prices[-5:] * total_volume[-5:]) / max(np.sum(total_volume[-5:]), 1e-8)
            vwap_ratio = close_prices[-1] / max(vwap, 1e-8)
        else:
            vwap_ratio = 1
        eng.append(vwap_ratio)
        
        # 12. Short volume to total volume ratio trend - change in shorting intensity
        if len(short_volume) >= 10 and len(total_volume) >= 10:
            recent_ratio = np.mean(short_volume[-5:] / np.maximum(total_volume[-5:], 1e-8))
            prev_ratio = np.mean(short_volume[-10:-5] / np.maximum(total_volume[-10:-5], 1e-8))
            denom = max(abs(prev_ratio), 1e-8)
            ratio_trend = (recent_ratio / denom) - 1
        else:
            ratio_trend = 0
        eng.append(ratio_trend)
        
        # 13. Put-call ratio trend - options sentiment change
        if t > 0:
            prev_pc_ratio = data[t-1, 63]
            denom = max(abs(prev_pc_ratio), 1e-8)
            pc_ratio_trend = (data[t, 63] / denom) - 1
        else:
            pc_ratio_trend = 0
        eng.append(pc_ratio_trend)
        
        # 14. Price momentum (rate of change over 10 days)
        if len(close_prices) >= 10:
            momentum = (close_prices[-1] / max(abs(close_prices[-10]), 1e-8)) - 1
        else:
            momentum = 0
        eng.append(momentum)
        
        # 15. Average True Range (ATR) - volatility measure
        if len(high_prices) >= 5 and len(low_prices) >= 5 and len(close_prices) >= 5:
            tr_values = []
            for i in range(1, 5):
                high_low = high_prices[-i] - low_prices[-i]
                high_close = abs(high_prices[-i] - close_prices[-(i+1)] if i < len(close_prices)-1 else 0)
                low_close = abs(low_prices[-i] - close_prices[-(i+1)] if i < len(close_prices)-1 else 0)
                tr = max(high_low, high_close, low_close)
                tr_values.append(tr)
            atr = np.mean(tr_values)
            # Normalize by price
            atr_normalized = atr / max(close_prices[-1], 1e-8)
        else:
            atr_normalized = 0
        eng.append(atr_normalized)
        
        # 16. Short volume acceleration - second derivative of short volume
        if len(short_volume) >= 15:
            recent_change = np.mean(short_volume[-5:]) - np.mean(short_volume[-10:-5])
            prev_change = np.mean(short_volume[-10:-5]) - np.mean(short_volume[-15:-10])
            denom = max(abs(prev_change), 1e-8)
            short_accel = (recent_change / denom) - 1
        else:
            short_accel = 0
        eng.append(short_accel)
        
        # 17. MACD Signal - trend strength and direction
        if len(close_prices) >= 15:
            ema12 = np.mean(close_prices[-12:])  # Simplified EMA
            ema26 = np.mean(close_prices[-15:])  # Using available data
            macd = ema12 - ema26
            # Normalize by price
            macd_normalized = macd / max(close_prices[-1], 1e-8)
        else:
            macd_normalized = 0
        eng.append(macd_normalized)
        
        # 18. Volume Oscillator - volume trend
        if len(total_volume) >= 10:
            short_vol_ma = np.mean(total_volume[-5:])
            long_vol_ma = np.mean(total_volume[-10:])
            vol_osc = (short_vol_ma / max(long_vol_ma, 1e-8)) - 1
        else:
            vol_osc = 0
        eng.append(vol_osc)
        
        # 19. High-Low range relative to price (average of last 5 days)
        if len(high_prices) >= 5 and len(low_prices) >= 5 and len(close_prices) >= 5:
            hl_range = np.mean((high_prices[-5:] - low_prices[-5:]) / np.maximum(close_prices[-5:], 1e-8))
        else:
            hl_range = 0
        eng.append(hl_range)
        
        # Ensure we don't exceed MAX_NEW
        if len(eng) > MAX_NEW:
            eng = eng[:MAX_NEW]
        
        # Combine raw and engineered features
        row = np.array(raw_keep + eng, dtype=np.float32)
        
        # Pad or truncate to MAX_TOTAL
        if row.size < MAX_TOTAL:
            row = np.pad(row, (0, MAX_TOTAL - row.size), 'constant')
        elif row.size > MAX_TOTAL:
            row = row[:MAX_TOTAL]
        
        features[t] = row
    
    # Handle NaN, inf values
    features = np.nan_to_num(features, nan=0.0, posinf=0.0, neginf=0.0)
    
    return features
```

Performance of this code: MAPE = 8.94%
Improvement over previous: +1.02%
Statistical Analysis: 70/100 features were significant (p < 0.05), 37 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 3):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 8.94%.

### Strategy
- Learn from previous iterations: refine or extend **high-importance** areas, drop or transform **low-importance** ones.
- Learn from previous iterations: keep the features with high feature importance, drop the features with low feature importance.
- Use **financial domain knowledge**.
- Maintain **LSTM-compatible** time series structure.
- Keep the feature set **compact and non-redundant** due to the small sample size.

### HARD IMPLEMENTATION RULES (must follow to avoid index errors and ensure a stable shape)
- Define constants at the top of the function:
  - `RAW_DIM = 97`
  - `MAX_TOTAL = 25`
  - `MAX_NEW = MAX_TOTAL - 1`  # upper bound; actual new count is determined after raw selection, see below
- **Do NOT preallocate** a fixed-width array and write with a moving `idx`.  
  Instead, for each timestep `t`:
  1) Build two Python lists:
     - `raw_keep = []`  (subset of raw features you choose to keep at t, but your selection logic must be **the same for all timesteps** so the final width is constant)
     - `eng = []`       (engineered features you append one by one)
  2) Always include in `raw_keep`: short interest (index 0) and average volume (index 1).
     Prefer **compact OHLC summaries** over copying all 60 OHLC channels (e.g., last-bar O,H,L,C; mean/median close over last 5; normalized range).
  3) After `raw_keep` is formed, compute `MAX_NEW = MAX_TOTAL - len(raw_keep)`.  
     **Never exceed this cap** when appending to `eng`.
  4) For every engineered candidate, **append to `eng`**.  
     If you hit the cap (`len(eng) == MAX_NEW`), **stop adding** more features (no exceptions).
  5) **Never reference** engineered columns by hard-coded indices (e.g., `features[t, 97+7]` is forbidden).  
     If you need a previously computed engineered value, **reuse the local variable** (e.g., `rsi_val`), not a column number.
  6) Ensure the column count is **identical for all timesteps** (no branch-induced width changes).  
     If a feature cannot be computed (e.g., insufficient points), **append a 0 placeholder** for that slot so widths remain equal.
  7) Construct the row with concatenation:
     - `row = np.array(raw_keep + eng, dtype=np.float32)`
     - If `row.size < MAX_TOTAL`, **pad with zeros** to length `MAX_TOTAL`.
     - If `row.size > MAX_TOTAL`, **truncate the tail** to `MAX_TOTAL`.
- After looping over timesteps, stack rows into a 2D array with shape `(lookback_window, MAX_TOTAL)` and return it.
- The function must **never attempt to write past** column index `MAX_TOTAL - 1`.

### Requirements
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 97) and returns a numpy array of shape (lookback_window, constructed_features).
2. The function must:
   - **Preserve the useful raw features**.
   - Add **new, diverse features** while enforcing **(kept raw + new) ≤ 25**.
   - Avoid near-duplicates: do not include multiple horizons of the same measure unless clearly distinct.
   - Use **eps clamping** for all divisions: `den = max(abs(den), 1e-8)`.
   - Apply `np.nan_to_num(..., nan=0.0, posinf=0.0, neginf=0.0)` before return.
3. Process each timestep independently but maintain the temporal axis (lookback_window).
4. Focus on the **most predictive and stable** features using DL-based importance + domain knowledge.
5. Include **inline comments** explaining how you improved on previous attempts and why each new feature matters.
6. Code must be **production-ready**: numerically safe, vectorized where reasonable, no randomness or printing.
7. DO NOT include imports — these are already available: `np, pd, math, statistics, stats, StandardScaler, MinMaxScaler, mean_squared_error, mean_absolute_error, datetime, time`.
8. Return a **2D numpy array** `(lookback_window, constructed_features)` with dtype `float32`.

### Strong redundancy rules
- **One per family** unless clearly distinct (e.g., choose either SMA ratio or z-score, not both).
- Drop overlapping or affine equivalents (e.g., SMA ratio vs z-score with same window).
- Avoid fragile ops (`np.corrcoef`, polynomial fits, EMA on <3 points); prefer simple, stable ratios.

### Deliverable
Return **ONLY** the Python function code (no text outside the code).
