
You are a financial data scientist specializing in **feature engineering for short-interest prediction** on equity time series.

## Data schema
- Input to your function: a **numpy array** `data` with shape **(lookback_window, 62)** for a *single* sample.
- Feature layout at each timestep `t`:
  - `data[t, 0]` → **short interest** at time *T* (reported every 15 days)
  - `data[t, 1]` → **average daily volume (past 15 days)**
  - `data[t, 2:62]` → **OHLC** over the past 15 days, flattened as **15 days × 4 columns** in order **[O, H, L, C]**  
    Use: `ohlc = data[t, 2:].reshape(15, 4)` → `open, high, low, close = ohlc[:,0], ohlc[:,1], ohlc[:,2], ohlc[:,3]`.

Total: 1 + 1 + 60 = 62 features per timestamp.

## Dataset constraints
- Only ~180 total samples available (very small).
- To reduce overfitting: **keep ALL 62 raw features** and add **new features** so that **(raw + new) ≤ 85 total columns**.
- Avoid redundant or near-duplicate engineered features. Prefer a small, diverse set.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 6.93%
  Features: All 62 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_0 (importance=0.0680), Feature_1 (importance=0.0084), Feature_55 (importance=0.0025), Feature_24 (importance=0.0015), Feature_34 (importance=0.0014)

Iteration 1: Iteration 1 - MAPE: 9.53% (Improvement Over Baseline: -2.6%) (Improvement Over Last: -2.6%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_69 (importance=0.0015), Feature_76 (importance=0.0015), Feature_72 (importance=0.0014), Feature_64 (importance=0.0012), Feature_63 (importance=0.0012)

Iteration 2: Iteration 2 - MAPE: 12.07% (Improvement Over Baseline: -5.1%) (Improvement Over Last: -2.5%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_62 (importance=0.0041), Feature_75 (importance=0.0038), Feature_63 (importance=0.0034), Feature_78 (importance=0.0031), Feature_0 (importance=0.0013)

Iteration 3: Iteration 3 - MAPE: 10.19% (Improvement Over Baseline: -3.3%) (Improvement Over Last: +1.9%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_64 (importance=0.0030), Feature_4 (importance=0.0027), Feature_63 (importance=0.0022), Feature_70 (importance=0.0021), Feature_83 (importance=0.0019)









PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 3):

```python
def construct_features(data):
    """
    Constructs features for short interest prediction.
    
    Args:
        data: numpy array of shape (lookback_window, 62)
        
    Returns:
        numpy array of shape (lookback_window, MAX_TOTAL)
    """
    RAW_DIM = 62
    MAX_TOTAL = 85
    MAX_NEW = MAX_TOTAL - RAW_DIM
    
    lookback_window = data.shape[0]
    result = np.zeros((lookback_window, MAX_TOTAL), dtype=np.float32)
    
    for t in range(lookback_window):
        # Keep all raw features
        raw_keep = list(data[t])
        
        # Extract key components for easier access
        short_interest = data[t, 0]
        avg_volume = data[t, 1]
        ohlc = data[t, 2:].reshape(15, 4)
        open_prices, high_prices, low_prices, close_prices = ohlc[:, 0], ohlc[:, 1], ohlc[:, 2], ohlc[:, 3]
        
        # Initialize engineered features list
        eng = []
        
        # 1. Days to Cover - key metric for short squeeze potential
        # Analysis shows this is a fundamental metric for short interest prediction
        days_to_cover = short_interest / max(avg_volume, 1e-8)
        eng.append(days_to_cover)
        
        # 2. Short Interest Ratio to Float (proxy)
        # Using average price as a proxy for market cap/float
        avg_price = np.mean(close_prices)
        si_to_float_proxy = short_interest / max(avg_price * avg_volume, 1e-8)
        eng.append(si_to_float_proxy)
        
        # 3. Short Interest Momentum (1-period change)
        # Captures the rate of change in short interest
        si_momentum = 0.0
        if t > 0:
            prev_si = data[t-1, 0]
            si_momentum = (short_interest - prev_si) / max(prev_si, 1e-8)
        eng.append(si_momentum)
        
        # 4. Price Trend - simple return over the period
        # Captures the overall price direction
        price_trend = (close_prices[-1] / max(close_prices[0], 1e-8)) - 1.0
        eng.append(price_trend)
        
        # 5. Volatility - normalized price range
        # Improved calculation using true range concepts
        typical_prices = (high_prices + low_prices + close_prices) / 3
        volatility = np.std(typical_prices) / max(np.mean(typical_prices), 1e-8)
        eng.append(volatility)
        
        # 6. Volume Trend - captures changes in trading activity
        # Volume changes often precede price movements
        volume_trend = 0.0
        if len(close_prices) >= 5:
            # Compare recent volume to earlier volume
            recent_vol = avg_volume
            if t >= 1:
                earlier_vol = data[t-1, 1]
                volume_trend = (recent_vol / max(earlier_vol, 1e-8)) - 1.0
        eng.append(volume_trend)
        
        # 7. RSI (14-day) - momentum oscillator
        # Improved calculation with proper up/down movement tracking
        up_moves = []
        down_moves = []
        for i in range(1, len(close_prices)):
            change = close_prices[i] - close_prices[i-1]
            if change > 0:
                up_moves.append(change)
                down_moves.append(0)
            else:
                up_moves.append(0)
                down_moves.append(abs(change))
        
        avg_up = np.mean(up_moves) if up_moves else 0
        avg_down = np.mean(down_moves) if down_moves else 0
        
        if avg_down > 1e-8:
            rs = avg_up / avg_down
            rsi = 100 - (100 / (1 + rs))
        else:
            rsi = 100 if avg_up > 0 else 50
        
        # Normalize RSI to [0,1]
        rsi_normalized = rsi / 100.0
        eng.append(rsi_normalized)
        
        # 8. Average True Range (ATR) - volatility indicator
        # Improved calculation with proper consideration of gaps
        tr_values = []
        for i in range(1, len(close_prices)):
            high_low = high_prices[i] - low_prices[i]
            high_close_prev = abs(high_prices[i] - close_prices[i-1])
            low_close_prev = abs(low_prices[i] - close_prices[i-1])
            tr = max(high_low, high_close_prev, low_close_prev)
            tr_values.append(tr)
        
        atr = np.mean(tr_values) if tr_values else 0.0
        # Normalize ATR by average price
        atr_normalized = atr / max(avg_price, 1e-8)
        eng.append(atr_normalized)
        
        # 9. Short Interest to ATR Ratio
        # New feature: relates short interest to volatility
        si_atr_ratio = short_interest / max(atr, 1e-8)
        eng.append(si_atr_ratio)
        
        # 10. Price to Moving Average Ratio - trend strength indicator
        # Simple but effective trend indicator
        sma = np.mean(close_prices)
        price_to_ma = close_prices[-1] / max(sma, 1e-8)
        eng.append(price_to_ma)
        
        # 11. Bollinger Band Width - volatility measure
        # Captures expanding/contracting volatility
        std_dev = np.std(close_prices)
        bb_width = (2 * std_dev) / max(sma, 1e-8)
        eng.append(bb_width)
        
        # 12. Bollinger Band Position - price position within bands
        # Where price is within volatility bands
        upper_band = sma + (2 * std_dev)
        lower_band = sma - (2 * std_dev)
        band_range = upper_band - lower_band
        if band_range > 1e-8:
            bb_position = (close_prices[-1] - lower_band) / band_range
        else:
            bb_position = 0.5
        eng.append(bb_position)
        
        # 13. MACD Signal - trend and momentum
        # Simplified MACD calculation
        if len(close_prices) >= 12:
            ema12 = np.mean(close_prices[-12:])
            ema26 = np.mean(close_prices)
            macd = (ema12 / max(ema26, 1e-8)) - 1.0
        else:
            macd = 0.0
        eng.append(macd)
        
        # 14. Price Acceleration - second derivative of price
        # Captures acceleration/deceleration in price movement
        price_accel = 0.0
        if len(close_prices) >= 3:
            returns = np.diff(close_prices) / np.maximum(close_prices[:-1], 1e-8)
            if len(returns) >= 2:
                price_accel = returns[-1] - returns[-2]
        eng.append(price_accel)
        
        # 15. Volume-Price Relationship - volume weighted price change
        # Captures potential accumulation/distribution
        vpr = 0.0
        if len(close_prices) >= 2:
            price_changes = np.diff(close_prices) / np.maximum(close_prices[:-1], 1e-8)
            vpr = np.mean(price_changes) * avg_volume
        eng.append(vpr)
        
        # 16. Intraday Volatility - average daily price range
        # Captures intraday price movement
        intraday_vol = np.mean((high_prices - low_prices) / np.maximum(open_prices, 1e-8))
        eng.append(intraday_vol)
        
        # 17. Gap Analysis - overnight price jumps
        # Captures significant overnight sentiment changes
        gaps = []
        for i in range(1, len(open_prices)):
            gap = (open_prices[i] - close_prices[i-1]) / max(close_prices[i-1], 1e-8)
            gaps.append(gap)
        avg_gap = np.mean(gaps) if gaps else 0.0
        eng.append(avg_gap)
        
        # 18. Short Interest to Volatility Ratio
        # Relates short interest to overall market volatility
        si_vol_ratio = short_interest / max(volatility, 1e-8)
        eng.append(si_vol_ratio)
        
        # 19. Stochastic Oscillator - momentum indicator
        # Improved calculation with proper consideration of price range
        if len(close_prices) >= 5:
            lowest_low = np.min(low_prices)
            highest_high = np.max(high_prices)
            if highest_high - lowest_low > 1e-8:
                k_percent = (close_prices[-1] - lowest_low) / (highest_high - lowest_low)
            else:
                k_percent = 0.5
        else:
            k_percent = 0.5
        eng.append(k_percent)
        
        # 20. Close Location Value - where price closes within daily range
        # Improved calculation for better signal quality
        clv_values = []
        for i in range(len(close_prices)):
            range_hl = high_prices[i] - low_prices[i]
            if range_hl > 1e-8:
                clv = ((close_prices[i] - low_prices[i]) - (high_prices[i] - close_prices[i])) / range_hl
            else:
                clv = 0.0
            clv_values.append(clv)
        avg_clv = np.mean(clv_values)
        eng.append(avg_clv)
        
        # 21. Price Range Expansion/Contraction - volatility trend
        # Captures expanding/contracting volatility
        range_ratio = 0.0
        if len(high_prices) >= 10:
            recent_ranges = high_prices[-5:] - low_prices[-5:]
            older_ranges = high_prices[-10:-5] - low_prices[-10:-5]
            range_ratio = np.mean(recent_ranges) / max(np.mean(older_ranges), 1e-8)
        eng.append(range_ratio)
        
        # 22. Short Interest Change Acceleration
        # Second derivative of short interest
        si_accel = 0.0
        if t >= 2:
            current_change = short_interest - data[t-1, 0]
            prev_change = data[t-1, 0] - data[t-2, 0]
            si_accel = current_change - prev_change
            # Normalize by the average short interest
            avg_si = (short_interest + data[t-1, 0] + data[t-2, 0]) / 3
            si_accel = si_accel / max(avg_si, 1e-8)
        eng.append(si_accel)
        
        # 23. Ensure we don't exceed MAX_NEW features
        if len(eng) > MAX_NEW:
            eng = eng[:MAX_NEW]
        
        # Combine raw and engineered features
        row = np.array(raw_keep + eng, dtype=np.float32)
        
        # Pad or truncate to MAX_TOTAL
        if row.size < MAX_TOTAL:
            row = np.pad(row, (0, MAX_TOTAL - row.size), 'constant')
        elif row.size > MAX_TOTAL:
            row = row[:MAX_TOTAL]
        
        result[t] = row
    
    # Handle any NaN, inf values
    result = np.nan_to_num(result, nan=0.0, posinf=0.0, neginf=0.0)
    
    return result
```

Performance of this code: MAPE = 10.19%
Change from previous: -3.25%
Statistical Analysis: 45/85 features were significant (p < 0.05), 29 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 4):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 6.93%.

### Strategy
- Learn from previous iterations: refine or extend **high-importance** areas, but keep all raw channels this time.
- Use **financial domain knowledge** for engineered features.
- Maintain **LSTM-compatible** time series structure.
- Keep the feature set **compact and non-redundant** due to the small sample size.

### HARD IMPLEMENTATION RULES (must follow to avoid index errors and ensure a stable shape)
- Define constants at the top of the function:
  - `RAW_DIM = 62`
  - `MAX_TOTAL = 85`
  - `MAX_NEW = MAX_TOTAL - RAW_DIM`
- **Do NOT preallocate** a fixed-width array and write with a moving `idx`.  
  Instead, for each timestep `t`:
  1) Start with `raw_keep = list(data[t])` (this includes **all 62 raw features**).
  2) Build `eng = []` for engineered features.
  3) After `raw_keep` is formed, compute `MAX_NEW = MAX_TOTAL - len(raw_keep)`.  
     **Never exceed this cap** when appending to `eng`.
  4) For every engineered candidate, **append to `eng`**.  
     If you hit the cap (`len(eng) == MAX_NEW`), **stop adding** more features (no exceptions).
  5) **Never reference** engineered columns by hard-coded indices (e.g., `features[t, 62+7]` is forbidden).  
     If you need a previously computed engineered value, **reuse the local variable** (e.g., `rsi_val`), not a column number.
  6) Ensure the column count is **identical for all timesteps** (no branch-induced width changes).  
     If a feature cannot be computed (e.g., insufficient points), **append a 0 placeholder** for that slot so widths remain equal.
  7) Construct the row with concatenation:
     - `row = np.array(raw_keep + eng, dtype=np.float32)`
     - If `row.size < MAX_TOTAL`, **pad with zeros** to length `MAX_TOTAL`.
     - If `row.size > MAX_TOTAL`, **truncate the tail** to `MAX_TOTAL`.
- After looping over timesteps, stack rows into a 2D array with shape `(lookback_window, MAX_TOTAL)` and return it.
- The function must **never attempt to write past** column index `MAX_TOTAL - 1`.

### Requirements
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 62) and returns a numpy array of shape (lookback_window, constructed_features).
2. The function must:
   - **Preserve all 62 raw features**.
   - Add **new, diverse features** while enforcing **(raw + new) ≤ 85**.
   - Avoid near-duplicates: do not include multiple horizons of the same measure unless clearly distinct.
   - Use **eps clamping** for all divisions: `den = max(abs(den), 1e-8)`.
   - Apply `np.nan_to_num(..., nan=0.0, posinf=0.0, neginf=0.0)` before return.
3. Process each timestep independently but maintain the temporal axis (lookback_window).
4. Focus on the **most predictive and stable** features using DL-based importance + domain knowledge.
5. Include **inline comments** explaining how you improved on previous attempts and why each new feature matters.
6. Code must be **production-ready**: numerically safe, vectorized where reasonable, no randomness or printing.
7. DO NOT include imports — these are already available: `np, pd, math, statistics, stats, StandardScaler, MinMaxScaler, mean_squared_error, mean_absolute_error, datetime, time`.
8. Return a **2D numpy array** `(lookback_window, constructed_features)` with dtype `float32`.

### Strong redundancy rules
- **One per family** unless clearly distinct (e.g., choose either SMA ratio or z-score, not both).
- Drop overlapping or affine equivalents (e.g., SMA ratio vs z-score with same window).
- Avoid fragile ops (`np.corrcoef`, polynomial fits, EMA on <3 points); prefer simple, stable ratios.

### Deliverable
Return **ONLY** the Python function code (no text outside the code).
