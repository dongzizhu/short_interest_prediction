
You are a financial data scientist specializing in **feature engineering for short-interest prediction** on equity time series.

## Data schema
- Input to your function: a **numpy array** `data` with shape **(lookback_window, 62)** for a *single* sample.
- Feature layout at each timestep `t`:
  - `data[t, 0]` → **short interest** at time *T* (reported every 15 days)
  - `data[t, 1]` → **average daily volume (past 15 days)**
  - `data[t, 2:62]` → **OHLC** over the past 15 days, flattened as **15 days × 4 columns** in order **[O, H, L, C]**  
    Use: `ohlc = data[t, 2:].reshape(15, 4)` → `open, high, low, close = ohlc[:,0], ohlc[:,1], ohlc[:,2], ohlc[:,3]`.

Total: 1 + 1 + 60 = 62 features per timestamp.

## Dataset constraints
- Only ~180 total samples available (very small).
- To reduce overfitting: **keep only the useful raw channels** and add **new features** so that **(kept raw + new) ≤ 25 total columns**.
- You **may drop** raw channels with consistently low importance or redundancy after the second iteration.
- Avoid redundant or near-duplicate engineered features. Prefer a small, diverse set.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 7.37%
  Features: All 62 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_6_t3 (importance=0.0009), Feature_1_t3 (importance=0.0009), Feature_35_t3 (importance=0.0007), Feature_3_t3 (importance=0.0007), Feature_0_t0 (importance=0.0006)

Iteration 1: Iteration 1 - MAPE: 8.67% (Improvement Over Baseline: -1.3%) (Improvement Over Last: -1.3%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_6_t3 (importance=0.0079), Feature_14_t1 (importance=0.0042), Feature_1_t1 (importance=0.0035), Feature_18_t0 (importance=0.0027), Feature_11_t0 (importance=0.0025)

Iteration 2: Iteration 2 - MAPE: 9.52% (Improvement Over Baseline: -2.1%) (Improvement Over Last: -0.8%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_10_t3 (importance=0.0144), Feature_17_t3 (importance=0.0089), Feature_9_t3 (importance=0.0049), Feature_2_t1 (importance=0.0044), Feature_16_t1 (importance=0.0039)









PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 2):

```python
def construct_features(data):
    RAW_DIM = 62
    MAX_TOTAL = 25
    
    lookback_window = data.shape[0]
    features = np.zeros((lookback_window, MAX_TOTAL), dtype=np.float32)
    
    for t in range(lookback_window):
        # Extract raw data for this timestep
        short_interest = data[t, 0]
        avg_volume = data[t, 1]
        ohlc = data[t, 2:].reshape(15, 4)
        open_prices, high_prices, low_prices, close_prices = ohlc[:, 0], ohlc[:, 1], ohlc[:, 2], ohlc[:, 3]
        
        # Keep essential raw features (based on importance analysis)
        # Keeping fewer raw features to make room for more engineered features
        raw_keep = [
            short_interest,  # Always keep short interest (highest importance)
            avg_volume,      # Always keep average volume (high importance)
            close_prices[-1],  # Most recent close price
            high_prices[-1],   # Most recent high price
            low_prices[-1],    # Most recent low price
        ]
        
        # Calculate MAX_NEW based on raw features kept
        MAX_NEW = MAX_TOTAL - len(raw_keep)
        
        # Initialize engineered features list
        eng = []
        
        # 1. Short Interest Specific Features (prioritized based on importance)
        
        # Short interest to volume ratio (high importance in previous iteration)
        si_volume_ratio = short_interest / max(avg_volume, 1e-8)
        eng.append(si_volume_ratio)
        
        # Short interest momentum (change over time if we have previous data)
        if t > 0:
            prev_si = data[t-1, 0]
            si_change = (short_interest - prev_si) / max(prev_si, 1e-8)
            eng.append(si_change)
            
            # Add acceleration of short interest (second derivative)
            if t > 1:
                prev_prev_si = data[t-2, 0]
                prev_si_change = (prev_si - prev_prev_si) / max(prev_prev_si, 1e-8)
                si_acceleration = si_change - prev_si_change
                eng.append(si_acceleration)
            else:
                eng.append(0.0)
        else:
            eng.append(0.0)  # No previous data
            eng.append(0.0)  # No acceleration data
        
        # Short interest to float ratio proxy (using volume as proxy for float)
        # Modified to use a more realistic float estimation
        si_float_proxy = short_interest / max(avg_volume * 30, 1e-8)  # 30 days as proxy for float
        eng.append(si_float_proxy)
        
        # 2. Price Momentum and Volatility Features
        
        # 5-day price momentum (ratio of latest close to 5 days ago close)
        if len(close_prices) >= 5:
            price_momentum_5d = close_prices[-1] / max(close_prices[-5], 1e-8) - 1.0
            eng.append(price_momentum_5d)
        else:
            eng.append(0.0)
            
        # Volatility: normalized price range over last 5 days
        if len(close_prices) >= 5:
            recent_high = np.max(high_prices[-5:])
            recent_low = np.min(low_prices[-5:])
            avg_price = np.mean(close_prices[-5:])
            normalized_range = (recent_high - recent_low) / max(avg_price, 1e-8)
            eng.append(normalized_range)
        else:
            eng.append(0.0)
        
        # 3. Technical Indicators (refined based on importance)
        
        # RSI (14-day) - simplified but more robust implementation
        if len(close_prices) >= 14:
            deltas = np.diff(close_prices[-14:])
            gains = np.where(deltas > 0, deltas, 0)
            losses = np.where(deltas < 0, -deltas, 0)
            avg_gain = np.mean(gains)
            avg_loss = np.mean(losses)
            rs = avg_gain / max(avg_loss, 1e-8)
            rsi = 100 - (100 / (1 + rs))
            eng.append(rsi / 100.0)  # Normalize to 0-1 range
        else:
            eng.append(0.5)  # Neutral RSI value
        
        # Bollinger Band Width - measure of volatility
        if len(close_prices) >= 10:
            sma = np.mean(close_prices[-10:])
            std = np.std(close_prices[-10:])
            bb_width = (2 * std) / max(sma, 1e-8)
            eng.append(bb_width)
        else:
            eng.append(0.0)
        
        # 4. Volume-Price Relationship Features
        
        # On-Balance Volume trend (simplified)
        if len(close_prices) >= 5:
            obv_proxy = 0
            for i in range(-5, 0):
                if i > -len(close_prices):
                    if i < -1 and close_prices[i] > close_prices[i-1]:
                        obv_proxy += avg_volume / 15  # Daily volume approximation
                    elif i < -1 and close_prices[i] < close_prices[i-1]:
                        obv_proxy -= avg_volume / 15
            # Normalize OBV
            obv_normalized = obv_proxy / max(avg_volume, 1e-8)
            eng.append(obv_normalized)
        else:
            eng.append(0.0)
        
        # Money Flow Index (MFI) - simplified
        if len(close_prices) >= 5:
            typical_prices = [(high_prices[i] + low_prices[i] + close_prices[i])/3 for i in range(-5, 0)]
            money_flow = [typical_prices[i] * (avg_volume/15) for i in range(len(typical_prices))]
            
            pos_flow = sum([money_flow[i] for i in range(1, len(money_flow)) 
                           if typical_prices[i] > typical_prices[i-1]])
            neg_flow = sum([money_flow[i] for i in range(1, len(money_flow)) 
                           if typical_prices[i] < typical_prices[i-1]])
            
            money_ratio = pos_flow / max(neg_flow, 1e-8)
            mfi = 100 - (100 / (1 + money_ratio))
            eng.append(mfi / 100.0)  # Normalize to 0-1
        else:
            eng.append(0.5)
        
        # 5. Advanced Price Pattern Features
        
        # Average Directional Index (ADX) - simplified
        if len(close_prices) >= 10:
            tr_sum = 0
            dx_sum = 0
            
            for i in range(-9, 0):
                if i > -len(close_prices):
                    # True Range
                    tr1 = high_prices[i] - low_prices[i]
                    tr2 = abs(high_prices[i] - close_prices[i-1]) if i > -len(close_prices)+1 else 0
                    tr3 = abs(low_prices[i] - close_prices[i-1]) if i > -len(close_prices)+1 else 0
                    tr = max(tr1, tr2, tr3)
                    tr_sum += tr
                    
                    # Directional Movement
                    if i > -len(close_prices)+1:
                        up_move = high_prices[i] - high_prices[i-1]
                        down_move = low_prices[i-1] - low_prices[i]
                        
                        if up_move > down_move and up_move > 0:
                            dx = up_move
                        elif down_move > up_move and down_move > 0:
                            dx = down_move
                        else:
                            dx = 0
                        
                        dx_sum += dx
            
            # Simplified ADX calculation
            adx = dx_sum / max(tr_sum, 1e-8)
            eng.append(adx)
        else:
            eng.append(0.0)
        
        # Chaikin Money Flow (CMF) - simplified
        if len(close_prices) >= 5:
            cmf_sum = 0
            vol_sum = avg_volume / 3  # Simplified volume sum
            
            for i in range(-5, 0):
                if i > -len(close_prices):
                    # Money Flow Multiplier
                    mfm = ((close_prices[i] - low_prices[i]) - (high_prices[i] - close_prices[i])) / max(high_prices[i] - low_prices[i], 1e-8)
                    # Money Flow Volume
                    mfv = mfm * (avg_volume / 15)  # Daily volume approximation
                    cmf_sum += mfv
            
            cmf = cmf_sum / max(vol_sum, 1e-8)
            eng.append(cmf)
        else:
            eng.append(0.0)
        
        # 6. Specialized Short Interest Predictors
        
        # Short Interest to Price Ratio (normalized)
        si_price_ratio = short_interest / max(close_prices[-1], 1e-8)
        eng.append(si_price_ratio)
        
        # Short Interest Coverage Ratio (days to cover)
        days_to_cover = short_interest / max(avg_volume, 1e-8)
        eng.append(days_to_cover)
        
        # Short Interest to Range Ratio
        if len(close_prices) >= 5:
            price_range = np.max(high_prices[-5:]) - np.min(low_prices[-5:])
            si_range_ratio = short_interest / max(price_range * avg_volume, 1e-8)
            eng.append(si_range_ratio)
        else:
            eng.append(0.0)
        
        # 7. Market Efficiency Measures
        
        # Hurst Exponent (simplified) - measures mean reversion vs trend following
        if len(close_prices) >= 10:
            # Log returns
            log_returns = np.diff(np.log(close_prices[-10:]))
            # Cumulative sum of log returns
            cum_returns = np.cumsum(log_returns)
            # Range of cumulative returns
            r_range = np.max(cum_returns) - np.min(cum_returns)
            # Standard deviation of log returns
            std_returns = np.std(log_returns)
            # Simplified Hurst calculation
            hurst_proxy = r_range / max(std_returns, 1e-8) / np.sqrt(len(log_returns))
            eng.append(min(hurst_proxy, 10.0))  # Cap to avoid extreme values
        else:
            eng.append(0.5)  # Default value
        
        # Ensure we don't exceed MAX_NEW
        eng = eng[:MAX_NEW]
        
        # Combine raw and engineered features
        row = np.array(raw_keep + eng, dtype=np.float32)
        
        # Ensure consistent size
        if row.size < MAX_TOTAL:
            # Pad with zeros if needed
            row = np.pad(row, (0, MAX_TOTAL - row.size), 'constant')
        elif row.size > MAX_TOTAL:
            # Truncate if needed
            row = row[:MAX_TOTAL]
            
        features[t, :] = row
    
    # Handle NaN, inf values
    features = np.nan_to_num(features, nan=0.0, posinf=0.0, neginf=0.0)
    
    return features
```

Performance of this code: MAPE = 9.52%
Change from previous: -2.14%
Statistical Analysis: 56/100 features were significant (p < 0.05), 37 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 3):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 7.37%.

### Strategy
- Learn from previous iterations: refine or extend **high-importance** areas, drop or transform **low-importance** ones.
- Learn from previous iterations: keep the features with high feature importance, drop the features with low feature importance.
- Use **financial domain knowledge**.
- Maintain **LSTM-compatible** time series structure.
- Keep the feature set **compact and non-redundant** due to the small sample size.

### HARD IMPLEMENTATION RULES (must follow to avoid index errors and ensure a stable shape)
- Define constants at the top of the function:
  - `RAW_DIM = 62`
  - `MAX_TOTAL = 25`
  - `MAX_NEW = MAX_TOTAL - 1`  # upper bound; actual new count is determined after raw selection, see below
- **Do NOT preallocate** a fixed-width array and write with a moving `idx`.  
  Instead, for each timestep `t`:
  1) Build two Python lists:
     - `raw_keep = []`  (subset of raw features you choose to keep at t, but your selection logic must be **the same for all timesteps** so the final width is constant)
     - `eng = []`       (engineered features you append one by one)
  2) Always include in `raw_keep`: short interest (index 0) and average volume (index 1).
     Prefer **compact OHLC summaries** over copying all 60 OHLC channels (e.g., last-bar O,H,L,C; mean/median close over last 5; normalized range).
  3) After `raw_keep` is formed, compute `MAX_NEW = MAX_TOTAL - len(raw_keep)`.  
     **Never exceed this cap** when appending to `eng`.
  4) For every engineered candidate, **append to `eng`**.  
     If you hit the cap (`len(eng) == MAX_NEW`), **stop adding** more features (no exceptions).
  5) **Never reference** engineered columns by hard-coded indices (e.g., `features[t, 62+7]` is forbidden).  
     If you need a previously computed engineered value, **reuse the local variable** (e.g., `rsi_val`), not a column number.
  6) Ensure the column count is **identical for all timesteps** (no branch-induced width changes).  
     If a feature cannot be computed (e.g., insufficient points), **append a 0 placeholder** for that slot so widths remain equal.
  7) Construct the row with concatenation:
     - `row = np.array(raw_keep + eng, dtype=np.float32)`
     - If `row.size < MAX_TOTAL`, **pad with zeros** to length `MAX_TOTAL`.
     - If `row.size > MAX_TOTAL`, **truncate the tail** to `MAX_TOTAL`.
- After looping over timesteps, stack rows into a 2D array with shape `(lookback_window, MAX_TOTAL)` and return it.
- The function must **never attempt to write past** column index `MAX_TOTAL - 1`.

### Requirements
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 62) and returns a numpy array of shape (lookback_window, constructed_features).
2. The function must:
   - **Preserve the raw features**.
   - Add **new, diverse features** while enforcing **(kept raw + new) ≤ 25**.
   - Avoid near-duplicates: do not include multiple horizons of the same measure unless clearly distinct.
   - Use **eps clamping** for all divisions: `den = max(abs(den), 1e-8)`.
   - Apply `np.nan_to_num(..., nan=0.0, posinf=0.0, neginf=0.0)` before return.
3. Process each timestep independently but maintain the temporal axis (lookback_window).
4. Focus on the **most predictive and stable** features using DL-based importance + domain knowledge.
5. Include **inline comments** explaining how you improved on previous attempts and why each new feature matters.
6. Code must be **production-ready**: numerically safe, vectorized where reasonable, no randomness or printing.
7. DO NOT include imports — these are already available: `np, pd, math, statistics, stats, StandardScaler, MinMaxScaler, mean_squared_error, mean_absolute_error, datetime, time`.
8. Return a **2D numpy array** `(lookback_window, constructed_features)` with dtype `float32`.

### Strong redundancy rules
- **One per family** unless clearly distinct (e.g., choose either SMA ratio or z-score, not both).
- Drop overlapping or affine equivalents (e.g., SMA ratio vs z-score with same window).
- Avoid fragile ops (`np.corrcoef`, polynomial fits, EMA on <3 points); prefer simple, stable ratios.

### Deliverable
Return **ONLY** the Python function code (no text outside the code).
