
You are a financial data scientist specializing in **feature engineering for short-interest prediction** on equity time series.

## Data schema
- Input to your function: a **numpy array** `data` with shape **(lookback_window, 97)** for a *single* sample.
- Feature layout at each timestep `t`:
  - `data[t, 0]` → **short interest** at time *T* (reported every 15 days)
  - `data[t, 1]` → **average daily volume (past 15 days)**
  - `data[t, 2]` → **days to cover** The number of days it would take to cover all short positions based on average daily trading volume.
  - `data[t, 3:63]` → **OHLC** over the past 15 days, flattened as **15 days × 4 columns** in order **[O, H, L, C]**  
    Use: `ohlc = data[t, 3:].reshape(15, 4)` → `open, high, low, close = ohlc[:,0], ohlc[:,1], ohlc[:,2], ohlc[:,3]`.
  - `data[t, 63]` → **options_put_call_volume_ratio** The ratio of the volume of put options to call options traded on that day.
  - `data[t, 64]` → **options_synthetic_short_cost** The cost associated with creating a synthetic short position using options.
  - `data[t, 65]` → **options_avg_implied_volatility** The average implied volatility of options, reflecting market expectations of future stock price volatility.
  - `data[t, 66]` → **shares_outstanding** The total number of shares of a company that are currently owned by all its shareholders, including restricted shares owned by company insiders and institutional investors.
  - `data[t, 67:82]` → Daily short interest volume for the stock over the past 15 days, flattened as **15 days × 1 columns**. Represents the total number of shares that were sold short on each day.
  - `data[t, 82:97]` → Daily total trading volume for the stock over the past 15 days, flattened as **15 days × 1 columns**.  Represents the total number of shares traded (buy + sell) on that trading day.

Total: 3 + 60 + 4 + 30 = 97 features(dimensions) per timestamp.

## Dataset constraints
- Only ~180 total samples available (very small).
- To reduce overfitting: **keep only the useful raw channels** and add **new features** so that **(kept raw + new) ≤ 25 total columns**.
- You **may drop** raw channels with consistently low importance or redundancy after the second iteration.
- Avoid redundant or near-duplicate engineered features. Prefer a small, diverse set.



PERFORMANCE HISTORY:
Iteration 0: Baseline - MAPE: 10.54%
  Features: All 97 original features
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_69_t3 (importance=0.0018), Feature_71_t3 (importance=0.0017), Feature_70_t3 (importance=0.0015), Feature_72_t3 (importance=0.0014), Feature_74_t3 (importance=0.0008)

Iteration 5: Iteration 5 - MAPE: 10.10% (Improvement Over Previous Best: -1.2%) (Improvement Over Last Iteration: -0.6%)
  Features: claude feature engineering
  DL-Based Feature Importance Analysis:
    • Top important features: Feature_20_t3 (importance=0.0063), Feature_1_t3 (importance=0.0037), Feature_22_t3 (importance=0.0020), Feature_7_t1 (importance=0.0020), Feature_9_t2 (importance=0.0018)







PREVIOUS ITERATION CODE:
The following code was used in the most recent iteration (Iteration 5):

```python
def construct_features(data):
    RAW_DIM = 97
    MAX_TOTAL = 25
    
    lookback_window = data.shape[0]
    features = np.zeros((lookback_window, MAX_TOTAL), dtype=np.float32)
    
    for t in range(lookback_window):
        # Keep essential raw features based on feature importance analysis
        raw_keep = [
            data[t, 0],   # short interest - critical target feature
            data[t, 1],   # average daily volume - high importance
            data[t, 2],   # days to cover - key short interest metric
            data[t, 63],  # options_put_call_volume_ratio - options sentiment
            data[t, 64],  # options_synthetic_short_cost - cost of shorting
            data[t, 65],  # options_avg_implied_volatility - volatility expectation
            data[t, 66],  # shares_outstanding - needed for float calculations
        ]
        
        # Extract OHLC data for the past 15 days
        ohlc = data[t, 3:63].reshape(15, 4)
        open_prices, high_prices, low_prices, close_prices = ohlc[:, 0], ohlc[:, 1], ohlc[:, 2], ohlc[:, 3]
        
        # Extract short interest volume and total trading volume
        short_volume = data[t, 67:82]
        total_volume = data[t, 82:97]
        
        # Calculate MAX_NEW based on raw features kept
        MAX_NEW = MAX_TOTAL - len(raw_keep)
        
        # Initialize engineered features list
        eng = []
        
        # 1. Short interest to float ratio - consistently high importance
        # Key metric for short squeeze potential
        si_float_ratio = data[t, 0] / max(data[t, 66], 1e-8)
        eng.append(si_float_ratio)
        
        # 2. Short interest to average daily volume ratio - high importance in previous iterations
        # More stable version of days to cover
        si_adv_ratio = data[t, 0] / max(data[t, 1], 1e-8)
        eng.append(si_adv_ratio)
        
        # 3. Exponentially weighted short volume ratio - recent shorting intensity
        # Improved with more weight on most recent days for better signal
        if len(short_volume) >= 5 and len(total_volume) >= 5:
            weights = np.array([0.05, 0.1, 0.15, 0.3, 0.4])
            short_ratios = short_volume[-5:] / np.maximum(total_volume[-5:], 1e-8)
            weighted_short_ratio = np.sum(weights * short_ratios) if len(short_ratios) == 5 else np.mean(short_ratios)
        else:
            weighted_short_ratio = 0
        eng.append(weighted_short_ratio)
        
        # 4. Short interest growth rate - first derivative of short interest
        # Captures momentum in short interest buildup
        if t > 0:
            si_t = data[t, 0]
            si_t1 = data[t-1, 0]
            si_growth = (si_t / max(si_t1, 1e-8)) - 1
        else:
            si_growth = 0
        eng.append(si_growth)
        
        # 5. Short interest growth acceleration - second derivative
        # Captures acceleration in short interest buildup
        if t > 2:
            si_t = data[t, 0]
            si_t1 = data[t-1, 0]
            si_t2 = data[t-2, 0]
            
            growth_current = (si_t / max(si_t1, 1e-8)) - 1
            growth_prev = (si_t1 / max(si_t2, 1e-8)) - 1
            
            si_acceleration = growth_current - growth_prev
        else:
            si_acceleration = 0
        eng.append(si_acceleration)
        
        # 6. Recent price trend - normalized price change over last 5 days
        # Captures recent momentum that might trigger short covering
        if len(close_prices) >= 5:
            price_change_5d = (close_prices[-1] / max(close_prices[-5], 1e-8)) - 1
        else:
            price_change_5d = 0
        eng.append(price_change_5d)
        
        # 7. Price volatility (ATR-based) - measure of recent price volatility
        # Higher volatility can trigger short covering
        if len(high_prices) >= 5 and len(low_prices) >= 5 and len(close_prices) >= 5:
            # True Range calculation
            tr_values = []
            for i in range(-5, -1):
                high_low = high_prices[i] - low_prices[i]
                high_close = abs(high_prices[i] - close_prices[i-1]) if i > -5 else 0
                low_close = abs(low_prices[i] - close_prices[i-1]) if i > -5 else 0
                tr = max(high_low, high_close, low_close)
                tr_values.append(tr)
            
            atr = np.mean(tr_values) if tr_values else 0
            # Normalize by price
            norm_atr = atr / max(close_prices[-1], 1e-8)
        else:
            norm_atr = 0
        eng.append(norm_atr)
        
        # 8. Short volume intensity relative to price movement
        # Detects divergence between shorting activity and price movement
        if len(short_volume) >= 10 and len(close_prices) >= 10 and len(total_volume) >= 10:
            recent_short_ratio = np.mean(short_volume[-5:]) / max(np.mean(total_volume[-5:]), 1e-8)
            prev_short_ratio = np.mean(short_volume[-10:-5]) / max(np.mean(total_volume[-10:-5]), 1e-8)
            short_ratio_change = recent_short_ratio / max(prev_short_ratio, 1e-8) - 1
            
            price_change = close_prices[-1] / max(close_prices[-5], 1e-8) - 1
            
            # Positive value indicates divergence (more shorting but price rising, or less shorting but price falling)
            short_price_divergence = short_ratio_change * price_change
        else:
            short_price_divergence = 0
        eng.append(short_price_divergence)
        
        # 9. Relative volume trend - volume surge detection
        # Volume surges often precede short squeezes
        if len(total_volume) >= 10:
            recent_vol = np.mean(total_volume[-5:])
            prev_vol = np.mean(total_volume[-10:-5])
            rel_vol_trend = recent_vol / max(prev_vol, 1e-8) - 1
        else:
            rel_vol_trend = 0
        eng.append(rel_vol_trend)
        
        # 10. Implied volatility to historical volatility ratio
        # Market's expectation vs. realized volatility - predictive of future moves
        if len(high_prices) >= 10 and len(low_prices) >= 10:
            # Calculate historical volatility (simple version)
            price_range = np.mean(high_prices[-10:] - low_prices[-10:])
            avg_price = np.mean(close_prices[-10:])
            hist_vol = price_range / max(avg_price, 1e-8)
            
            # Ratio of implied to historical
            iv_hv_ratio = data[t, 65] / max(hist_vol, 1e-8)
        else:
            iv_hv_ratio = 1  # Neutral value
        eng.append(iv_hv_ratio)
        
        # 11. RSI (Relative Strength Index) - momentum oscillator
        # Extreme values can indicate potential reversals
        if len(close_prices) >= 14:
            delta = np.diff(np.append([close_prices[0]], close_prices))
            gain = np.where(delta > 0, delta, 0)
            loss = np.where(delta < 0, -delta, 0)
            avg_gain = np.mean(gain[-14:])
            avg_loss = np.mean(loss[-14:])
            rs = avg_gain / max(avg_loss, 1e-8)
            rsi = 100 - (100 / (1 + rs))
        else:
            rsi = 50  # Neutral value
        eng.append(rsi)
        
        # 12. Bollinger Band Width - volatility contraction/expansion
        # Tight bands often precede significant price moves
        if len(close_prices) >= 20:
            sma20 = np.mean(close_prices[-20:])
            std20 = np.std(close_prices[-20:])
            bb_width = (2 * std20) / max(sma20, 1e-8)
        else:
            bb_width = 0.1  # Default value
        eng.append(bb_width)
        
        # 13. Short squeeze potential composite - combined indicator
        # Weighted combination of key short squeeze factors
        if len(eng) >= 12:  # Make sure all required components exist
            short_squeeze_potential = (
                si_float_ratio * 0.3 +              # Short interest to float
                si_adv_ratio * 0.2 +                # Short interest to volume
                weighted_short_ratio * 0.15 +       # Recent short volume ratio
                (100 - rsi) / 100 * 0.15 +          # Oversold indicator (inverted RSI)
                price_change_5d * 0.1 +             # Recent price momentum
                rel_vol_trend * 0.1                 # Volume trend
            )
        else:
            short_squeeze_potential = 0
        eng.append(short_squeeze_potential)
        
        # 14. Institutional ownership pressure
        # Measures potential for institutional action based on short interest and float
        shares_outstanding = data[t, 66]
        inst_ownership_est = 0.7 * shares_outstanding  # Estimated institutional ownership
        inst_pressure = (data[t, 0] / max(inst_ownership_est, 1e-8)) * (data[t, 1] / max(shares_outstanding, 1e-8))
        eng.append(inst_pressure)
        
        # 15. Short interest to market cap ratio
        # Economic significance of short position relative to company value
        if len(close_prices) > 0:
            market_cap = shares_outstanding * close_prices[-1]
            si_mcap_ratio = data[t, 0] * close_prices[-1] / max(market_cap, 1e-8)
        else:
            si_mcap_ratio = 0
        eng.append(si_mcap_ratio)
        
        # 16. Options sentiment change - rate of change in put/call ratio
        # Rapid changes in options sentiment can precede short squeezes
        if t > 0:
            current_pc = data[t, 63]
            prev_pc = data[t-1, 63]
            pc_change = current_pc / max(prev_pc, 1e-8) - 1
        else:
            pc_change = 0
        eng.append(pc_change)
        
        # 17. Short cost efficiency - cost of shorting relative to potential profit
        # Higher values indicate more expensive shorting relative to expected movement
        short_cost = data[t, 64]
        if len(close_prices) > 0 and data[t, 65] > 0:  # Use implied vol to estimate potential movement
            expected_move = close_prices[-1] * data[t, 65] * np.sqrt(30/365)  # Expected 30-day move
            cost_efficiency = short_cost / max(expected_move, 1e-8)
        else:
            cost_efficiency = short_cost
        eng.append(cost_efficiency)
        
        # 18. Liquidity-adjusted short ratio
        # Short interest adjusted for market liquidity conditions
        liquidity_adj_short = si_adv_ratio * (1 + bb_width) * (1 + weighted_short_ratio)
        eng.append(liquidity_adj_short)
        
        # Ensure we don't exceed MAX_NEW
        if len(eng) > MAX_NEW:
            eng = eng[:MAX_NEW]
        
        # Combine raw and engineered features
        row = np.array(raw_keep + eng, dtype=np.float32)
        
        # Pad or truncate to MAX_TOTAL
        if row.size < MAX_TOTAL:
            row = np.pad(row, (0, MAX_TOTAL - row.size), 'constant')
        elif row.size > MAX_TOTAL:
            row = row[:MAX_TOTAL]
        
        features[t] = row
    
    # Handle NaN, inf values
    features = np.nan_to_num(features, nan=0.0, posinf=0.0, neginf=0.0)
    
    return features
```

Performance of this code: MAPE = 10.10%
Change from previous: -1.16%
Statistical Analysis: 78/100 features were significant (p < 0.05), 59 were highly significant (p < 0.01)

INSTRUCTIONS FOR NEW CODE:
- Analyze the previous code and understand what features it tried to create
- Identify what worked well and what didn't work based on performance and statistical significance
- If the previous code worked but had poor performance, try different feature engineering approaches
- Consider the statistical significance of features - focus on creating features that are likely to be statistically significant
- Your new code should be an improvement over the previous attempt
- Think about what additional financial insights or technical indicators could be valuable


CURRENT TASK (Iteration 6):
Your goal is to create an improved feature engineering function that will achieve better performance than the current best MAPE of 8.94%.

### Strategy
- Learn from previous iterations: refine or extend **high-importance** areas, drop or transform **low-importance** ones.
- Learn from previous iterations: keep the features with high feature importance, drop the features with low feature importance.
- Use **financial domain knowledge**.
- Maintain **LSTM-compatible** time series structure.
- Keep the feature set **compact and non-redundant** due to the small sample size.

### HARD IMPLEMENTATION RULES (must follow to avoid index errors and ensure a stable shape)
- Define constants at the top of the function:
  - `RAW_DIM = 97`
  - `MAX_TOTAL = 25`
  - `MAX_NEW = MAX_TOTAL - 1`  # upper bound; actual new count is determined after raw selection, see below
- **Do NOT preallocate** a fixed-width array and write with a moving `idx`.  
  Instead, for each timestep `t`:
  1) Build two Python lists:
     - `raw_keep = []`  (subset of raw features you choose to keep at t, but your selection logic must be **the same for all timesteps** so the final width is constant)
     - `eng = []`       (engineered features you append one by one)
  2) Always include in `raw_keep`: short interest (index 0) and average volume (index 1).
     Prefer **compact OHLC summaries** over copying all 60 OHLC channels (e.g., last-bar O,H,L,C; mean/median close over last 5; normalized range).
  3) After `raw_keep` is formed, compute `MAX_NEW = MAX_TOTAL - len(raw_keep)`.  
     **Never exceed this cap** when appending to `eng`.
  4) For every engineered candidate, **append to `eng`**.  
     If you hit the cap (`len(eng) == MAX_NEW`), **stop adding** more features (no exceptions).
  5) **Never reference** engineered columns by hard-coded indices (e.g., `features[t, 97+7]` is forbidden).  
     If you need a previously computed engineered value, **reuse the local variable** (e.g., `rsi_val`), not a column number.
  6) Ensure the column count is **identical for all timesteps** (no branch-induced width changes).  
     If a feature cannot be computed (e.g., insufficient points), **append a 0 placeholder** for that slot so widths remain equal.
  7) Construct the row with concatenation:
     - `row = np.array(raw_keep + eng, dtype=np.float32)`
     - If `row.size < MAX_TOTAL`, **pad with zeros** to length `MAX_TOTAL`.
     - If `row.size > MAX_TOTAL`, **truncate the tail** to `MAX_TOTAL`.
- After looping over timesteps, stack rows into a 2D array with shape `(lookback_window, MAX_TOTAL)` and return it.
- The function must **never attempt to write past** column index `MAX_TOTAL - 1`.

### Requirements
1. Write a function called `construct_features` that takes a numpy array of shape (lookback_window, 97) and returns a numpy array of shape (lookback_window, constructed_features).
2. The function must:
   - **Preserve the useful raw features**.
   - Add **new, diverse features** while enforcing **(kept raw + new) ≤ 25**.
   - Avoid near-duplicates: do not include multiple horizons of the same measure unless clearly distinct.
   - Use **eps clamping** for all divisions: `den = max(abs(den), 1e-8)`.
   - Apply `np.nan_to_num(..., nan=0.0, posinf=0.0, neginf=0.0)` before return.
3. Process each timestep independently but maintain the temporal axis (lookback_window).
4. Focus on the **most predictive and stable** features using DL-based importance + domain knowledge.
5. Include **inline comments** explaining how you improved on previous attempts and why each new feature matters.
6. Code must be **production-ready**: numerically safe, vectorized where reasonable, no randomness or printing.
7. DO NOT include imports — these are already available: `np, pd, math, statistics, stats, StandardScaler, MinMaxScaler, mean_squared_error, mean_absolute_error, datetime, time`.
8. Return a **2D numpy array** `(lookback_window, constructed_features)` with dtype `float32`.

### Strong redundancy rules
- **One per family** unless clearly distinct (e.g., choose either SMA ratio or z-score, not both).
- Drop overlapping or affine equivalents (e.g., SMA ratio vs z-score with same window).
- Avoid fragile ops (`np.corrcoef`, polynomial fits, EMA on <3 points); prefer simple, stable ratios.

### Deliverable
Return **ONLY** the Python function code (no text outside the code).
